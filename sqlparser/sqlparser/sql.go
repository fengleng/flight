// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:17

package sqlparser

import __yyfmt__ "fmt"

//line sql.y:19

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:46
type yySymType struct {
	yys              int
	empty            struct{}
	statement        Statement
	selStmt          SelectStatement
	ins              *Insert
	byt              byte
	bytes            []byte
	bytes2           [][]byte
	str              string
	selectExprs      SelectExprs
	selectExpr       SelectExpr
	columns          Columns
	colName          *ColName
	tableExprs       TableExprs
	tableExpr        TableExpr
	tableName        TableName
	tableNames       TableNames
	indexHints       *IndexHints
	expr             Expr
	exprs            Exprs
	boolVal          BoolVal
	colTuple         ColTuple
	values           Values
	valTuple         ValTuple
	subquery         *Subquery
	whens            []*When
	when             *When
	orderBy          OrderBy
	order            *Order
	limit            *Limit
	updateExprs      UpdateExprs
	updateExpr       *UpdateExpr
	colIdent         ColIdent
	colIdents        []ColIdent
	tableIdent       TableIdent
	convertType      *ConvertType
	aliasedTableName *AliasedTableExpr
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALL = 57361
const DISTINCT = 57362
const AS = 57363
const EXISTS = 57364
const ASC = 57365
const DESC = 57366
const INTO = 57367
const DUPLICATE = 57368
const KEY = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const VALUES = 57373
const LAST_INSERT_ID = 57374
const NEXT = 57375
const VALUE = 57376
const SHARE = 57377
const MODE = 57378
const SQL_NO_CACHE = 57379
const SQL_CACHE = 57380
const JOIN = 57381
const STRAIGHT_JOIN = 57382
const LEFT = 57383
const RIGHT = 57384
const INNER = 57385
const OUTER = 57386
const CROSS = 57387
const NATURAL = 57388
const USE = 57389
const FORCE = 57390
const ON = 57391
const ID = 57392
const HEX = 57393
const STRING = 57394
const INTEGRAL = 57395
const FLOAT = 57396
const HEXNUM = 57397
const VALUE_ARG = 57398
const LIST_ARG = 57399
const COMMENT = 57400
const NULL = 57401
const TRUE = 57402
const FALSE = 57403
const OR = 57404
const AND = 57405
const NOT = 57406
const BETWEEN = 57407
const CASE = 57408
const WHEN = 57409
const THEN = 57410
const ELSE = 57411
const END = 57412
const LE = 57413
const GE = 57414
const NE = 57415
const NULL_SAFE_EQUAL = 57416
const IS = 57417
const LIKE = 57418
const REGEXP = 57419
const IN = 57420
const SHIFT_LEFT = 57421
const SHIFT_RIGHT = 57422
const DIV = 57423
const MOD = 57424
const UNARY = 57425
const COLLATE = 57426
const BINARY = 57427
const INTERVAL = 57428
const JSON_EXTRACT_OP = 57429
const JSON_UNQUOTE_EXTRACT_OP = 57430
const CREATE = 57431
const ALTER = 57432
const DROP = 57433
const RENAME = 57434
const ANALYZE = 57435
const TABLE = 57436
const INDEX = 57437
const VIEW = 57438
const TO = 57439
const IGNORE = 57440
const IF = 57441
const UNIQUE = 57442
const USING = 57443
const SHOW = 57444
const DESCRIBE = 57445
const EXPLAIN = 57446
const DATE = 57447
const ESCAPE = 57448
const REPAIR = 57449
const OPTIMIZE = 57450
const TRUNCATE = 57451
const DATABASES = 57452
const TABLES = 57453
const VITESS_KEYSPACES = 57454
const VITESS_SHARDS = 57455
const VSCHEMA_TABLES = 57456
const INTEGER = 57457
const CHARACTER = 57458
const CURRENT_TIMESTAMP = 57459
const DATABASE = 57460
const CURRENT_DATE = 57461
const CURRENT_TIME = 57462
const LOCALTIME = 57463
const LOCALTIMESTAMP = 57464
const UTC_DATE = 57465
const UTC_TIME = 57466
const UTC_TIMESTAMP = 57467
const REPLACE = 57468
const CONVERT = 57469
const CAST = 57470
const GROUP_CONCAT = 57471
const SEPARATOR = 57472
const MATCH = 57473
const AGAINST = 57474
const BOOLEAN = 57475
const LANGUAGE = 57476
const WITH = 57477
const QUERY = 57478
const EXPANSION = 57479
const BEGIN = 57480
const START = 57481
const TRANSACTION = 57482
const COMMIT = 57483
const ROLLBACK = 57484
const UNUSED = 57485

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"USING",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VSCHEMA_TABLES",
	"INTEGER",
	"CHARACTER",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"UNUSED",
	"';'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 24,
	-2, 4,
	-1, 227,
	103, 342,
	-2, 338,
	-1, 228,
	103, 343,
	-2, 339,
	-1, 449,
	5, 24,
	-2, 293,
	-1, 485,
	103, 345,
	-2, 341,
	-1, 593,
	5, 25,
	-2, 175,
	-1, 656,
	5, 25,
	-2, 294,
	-1, 695,
	5, 24,
	-2, 296,
	-1, 739,
	5, 25,
	-2, 297,
}

const yyPrivate = 57344

const yyLast = 3881

var yyAct = [...]int{
	243, 228, 408, 581, 280, 477, 682, 256, 582, 351,
	329, 484, 49, 545, 619, 578, 626, 349, 188, 222,
	681, 562, 700, 548, 514, 330, 3, 303, 66, 309,
	245, 223, 254, 94, 187, 333, 205, 48, 318, 194,
	212, 196, 766, 761, 765, 756, 764, 760, 685, 755,
	211, 53, 717, 189, 190, 191, 192, 193, 187, 187,
	233, 341, 353, 187, 489, 635, 224, 210, 496, 195,
	238, 230, 74, 258, 55, 56, 57, 58, 85, 365,
	364, 69, 494, 84, 354, 85, 187, 82, 187, 420,
	78, 73, 187, 357, 93, 596, 366, 470, 472, 608,
	595, 594, 340, 547, 231, 610, 46, 499, 65, 538,
	242, 539, 87, 88, 89, 550, 746, 377, 376, 386,
	387, 379, 380, 381, 382, 383, 384, 385, 378, 234,
	215, 388, 636, 90, 86, 724, 538, 706, 539, 398,
	399, 377, 376, 386, 387, 379, 380, 381, 382, 383,
	384, 385, 378, 754, 538, 388, 539, 540, 388, 363,
	659, 493, 495, 492, 630, 471, 600, 407, 184, 342,
	345, 337, 378, 366, 344, 388, 687, 68, 541, 77,
	75, 79, 563, 747, 540, 237, 347, 71, 709, 712,
	609, 563, 607, 642, 311, 752, 365, 364, 497, 730,
	217, 364, 540, 689, 67, 541, 72, 81, 76, 70,
	521, 187, 305, 366, 498, 80, 751, 366, 187, 187,
	46, 187, 734, 541, 519, 520, 518, 306, 83, 278,
	517, 187, 743, 244, 66, 348, 187, 66, 239, 187,
	365, 364, 187, 386, 387, 379, 380, 381, 382, 383,
	384, 385, 378, 356, 307, 388, 64, 366, 221, 726,
	244, 637, 232, 377, 376, 386, 387, 379, 380, 381,
	382, 383, 384, 385, 378, 240, 244, 388, 381, 382,
	383, 384, 385, 378, 209, 235, 388, 236, 225, 553,
	215, 241, 379, 380, 381, 382, 383, 384, 385, 378,
	620, 19, 388, 624, 244, 365, 364, 438, 658, 244,
	66, 553, 244, 248, 304, 187, 316, 244, 187, 187,
	187, 187, 366, 224, 612, 613, 614, 396, 478, 187,
	466, 467, 579, 187, 343, 452, 187, 651, 449, 187,
	343, 187, 187, 50, 439, 654, 316, 437, 66, 474,
	479, 224, 624, 200, 368, 483, 187, 468, 454, 187,
	456, 478, 187, 66, 486, 464, 369, 453, 316, 455,
	473, 21, 507, 509, 510, 481, 515, 508, 624, 502,
	624, 422, 423, 424, 425, 426, 427, 428, 367, 21,
	215, 215, 215, 215, 447, 537, 448, 409, 21, 433,
	476, 343, 365, 364, 418, 215, 315, 66, 485, 554,
	314, 251, 202, 215, 694, 46, 279, 552, 46, 366,
	338, 66, 565, 601, 589, 579, 445, 360, 316, 461,
	346, 542, 543, 46, 462, 355, 468, 463, 358, 324,
	325, 361, 46, 459, 567, 516, 560, 592, 460, 185,
	591, 458, 66, 583, 457, 224, 46, 763, 588, 759,
	482, 570, 352, 435, 436, 352, 611, 580, 571, 593,
	485, 206, 207, 218, 218, 226, 585, 503, 218, 576,
	504, 505, 575, 511, 512, 599, 246, 757, 731, 310,
	597, 66, 66, 320, 323, 324, 325, 321, 247, 322,
	326, 218, 308, 218, 692, 365, 364, 218, 603, 652,
	604, 487, 359, 328, 451, 555, 556, 203, 204, 559,
	310, 197, 366, 515, 574, 737, 409, 198, 736, 557,
	558, 50, 573, 566, 720, 568, 569, 478, 441, 721,
	362, 480, 52, 615, 54, 225, 622, 339, 577, 304,
	47, 1, 66, 91, 327, 490, 633, 634, 500, 332,
	638, 501, 625, 488, 60, 644, 606, 645, 646, 647,
	648, 605, 491, 225, 187, 352, 352, 229, 572, 586,
	434, 302, 735, 641, 719, 655, 656, 657, 640, 417,
	561, 352, 516, 257, 598, 506, 653, 268, 265, 267,
	266, 660, 66, 187, 440, 446, 370, 187, 255, 249,
	667, 270, 269, 271, 272, 273, 274, 469, 214, 275,
	312, 319, 317, 220, 675, 670, 218, 213, 650, 66,
	716, 671, 745, 218, 335, 544, 218, 352, 444, 666,
	552, 22, 679, 683, 677, 680, 218, 51, 676, 564,
	623, 218, 686, 187, 218, 208, 690, 218, 684, 583,
	66, 66, 691, 693, 639, 66, 66, 66, 18, 632,
	66, 400, 401, 402, 403, 404, 405, 225, 17, 643,
	587, 707, 708, 695, 713, 714, 704, 702, 703, 711,
	16, 15, 14, 485, 13, 12, 11, 10, 722, 583,
	409, 725, 699, 727, 728, 661, 662, 9, 66, 8,
	7, 281, 43, 6, 5, 4, 667, 733, 199, 602,
	352, 20, 723, 2, 739, 215, 66, 0, 66, 224,
	218, 742, 226, 218, 218, 218, 218, 0, 744, 0,
	749, 738, 0, 0, 465, 0, 753, 0, 218, 750,
	0, 335, 0, 758, 475, 43, 218, 218, 688, 0,
	226, 0, 475, 201, 762, 0, 0, 0, 216, 0,
	0, 218, 0, 649, 218, 0, 0, 218, 0, 0,
	628, 0, 513, 0, 0, 522, 523, 524, 525, 526,
	527, 528, 529, 530, 531, 532, 533, 534, 535, 536,
	0, 0, 668, 74, 0, 718, 669, 320, 323, 324,
	325, 321, 69, 322, 326, 0, 0, 590, 82, 0,
	0, 78, 73, 551, 475, 0, 0, 0, 551, 551,
	352, 0, 551, 0, 0, 0, 0, 0, 0, 65,
	0, 0, 0, 0, 0, 672, 551, 551, 551, 551,
	0, 62, 748, 409, 0, 0, 0, 628, 0, 0,
	352, 551, 0, 0, 226, 377, 376, 386, 387, 379,
	380, 381, 382, 383, 384, 385, 378, 0, 0, 388,
	0, 0, 0, 0, 0, 0, 0, 0, 697, 698,
	0, 0, 0, 701, 701, 701, 0, 59, 352, 61,
	0, 0, 0, 63, 0, 0, 0, 0, 68, 0,
	77, 75, 79, 43, 0, 0, 0, 0, 71, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 331, 0,
	0, 616, 617, 618, 0, 67, 352, 72, 81, 76,
	70, 0, 0, 0, 350, 0, 80, 350, 0, 0,
	0, 225, 0, 0, 740, 0, 741, 0, 0, 0,
	0, 0, 0, 551, 0, 397, 376, 386, 387, 379,
	380, 381, 382, 383, 384, 385, 378, 551, 0, 388,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	406, 0, 0, 410, 411, 412, 413, 414, 415, 416,
	0, 419, 421, 421, 421, 421, 421, 421, 421, 421,
	429, 430, 431, 432, 0, 0, 0, 0, 218, 0,
	0, 0, 218, 0, 450, 0, 0, 0, 216, 216,
	216, 216, 673, 674, 0, 0, 0, 0, 0, 0,
	0, 551, 0, 331, 0, 0, 0, 475, 551, 0,
	0, 216, 0, 0, 0, 0, 0, 0, 350, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 372,
	0, 375, 0, 350, 0, 0, 0, 389, 390, 391,
	392, 393, 394, 395, 705, 373, 374, 371, 377, 376,
	386, 387, 379, 380, 381, 382, 383, 384, 385, 378,
	0, 0, 388, 0, 0, 0, 0, 0, 0, 43,
	377, 376, 386, 387, 379, 380, 381, 382, 383, 384,
	385, 378, 410, 0, 388, 0, 0, 732, 0, 0,
	0, 74, 0, 0, 546, 0, 253, 0, 226, 0,
	69, 0, 252, 0, 0, 289, 82, 0, 0, 78,
	73, 0, 0, 0, 0, 282, 283, 0, 0, 0,
	584, 0, 43, 0, 46, 0, 0, 227, 270, 269,
	271, 272, 273, 274, 0, 0, 275, 276, 277, 0,
	0, 250, 263, 0, 288, 21, 44, 23, 24, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 350, 33, 260, 261, 549, 0, 25, 0,
	300, 0, 262, 0, 0, 259, 264, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 32, 184, 0, 46,
	298, 0, 0, 0, 0, 0, 68, 0, 77, 75,
	79, 0, 0, 0, 0, 0, 71, 0, 290, 299,
	296, 297, 294, 295, 293, 292, 291, 301, 284, 285,
	287, 0, 286, 67, 631, 72, 81, 76, 70, 0,
	0, 0, 0, 0, 80, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 26, 27, 29, 28, 30,
	621, 0, 0, 0, 0, 0, 0, 0, 31, 34,
	35, 0, 0, 36, 37, 38, 663, 664, 665, 0,
	377, 376, 386, 387, 379, 380, 381, 382, 383, 384,
	385, 378, 45, 0, 388, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 39, 40, 0, 41, 42, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 216, 0, 0, 584, 0, 0, 696,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	350, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 710, 0, 0, 715, 0, 0,
	0, 0, 0, 0, 0, 0, 584, 0, 43, 173,
	160, 134, 175, 112, 126, 183, 127, 128, 154, 100,
	142, 74, 124, 0, 115, 96, 121, 97, 113, 136,
	69, 139, 111, 162, 145, 181, 82, 149, 0, 78,
	73, 0, 0, 138, 167, 140, 159, 133, 155, 105,
	148, 176, 125, 152, 0, 0, 0, 65, 0, 0,
	0, 0, 0, 0, 0, 0, 151, 172, 123, 153,
	95, 150, 0, 98, 101, 182, 170, 118, 119, 0,
	0, 0, 0, 0, 0, 0, 137, 141, 156, 131,
	0, 0, 0, 0, 0, 0, 729, 0, 116, 0,
	147, 0, 0, 0, 102, 99, 135, 0, 0, 0,
	104, 0, 117, 157, 0, 168, 132, 184, 171, 130,
	129, 174, 177, 166, 114, 122, 68, 120, 77, 75,
	79, 110, 169, 163, 164, 165, 71, 0, 108, 109,
	106, 107, 143, 144, 178, 179, 180, 158, 103, 0,
	0, 161, 146, 67, 0, 72, 81, 76, 70, 0,
	0, 0, 0, 0, 80, 173, 160, 134, 175, 112,
	126, 183, 127, 128, 154, 100, 142, 74, 124, 0,
	115, 96, 121, 97, 113, 136, 69, 139, 111, 162,
	145, 181, 82, 149, 0, 78, 73, 0, 0, 138,
	167, 140, 159, 133, 155, 105, 148, 176, 125, 152,
	46, 0, 0, 65, 0, 0, 0, 0, 0, 0,
	0, 0, 151, 172, 123, 153, 95, 150, 0, 98,
	101, 182, 170, 118, 119, 0, 0, 0, 0, 0,
	0, 0, 137, 141, 156, 131, 0, 0, 0, 0,
	0, 0, 0, 0, 116, 0, 147, 0, 0, 0,
	102, 99, 135, 0, 0, 0, 104, 0, 117, 157,
	0, 168, 132, 184, 171, 130, 129, 174, 177, 166,
	114, 122, 68, 120, 77, 75, 79, 110, 169, 163,
	164, 165, 71, 0, 108, 109, 106, 107, 143, 144,
	178, 179, 180, 158, 103, 0, 0, 161, 146, 67,
	0, 72, 81, 76, 70, 0, 0, 0, 0, 0,
	80, 173, 160, 134, 175, 112, 126, 183, 127, 128,
	154, 100, 142, 74, 124, 0, 115, 96, 121, 97,
	113, 136, 69, 139, 111, 162, 145, 181, 82, 149,
	0, 78, 73, 0, 0, 138, 167, 140, 159, 133,
	155, 105, 148, 176, 125, 152, 0, 0, 0, 227,
	0, 0, 0, 0, 0, 0, 0, 0, 151, 172,
	123, 153, 95, 150, 0, 98, 101, 182, 170, 118,
	119, 0, 0, 0, 0, 0, 0, 0, 137, 141,
	156, 131, 0, 0, 0, 0, 0, 0, 678, 0,
	116, 0, 147, 0, 0, 0, 102, 99, 135, 0,
	0, 0, 104, 0, 117, 157, 0, 168, 132, 184,
	171, 130, 129, 174, 177, 166, 114, 122, 68, 120,
	77, 75, 79, 110, 169, 163, 164, 165, 71, 0,
	108, 109, 106, 107, 143, 144, 178, 179, 180, 158,
	103, 0, 0, 161, 146, 67, 0, 72, 81, 76,
	70, 0, 0, 0, 0, 0, 80, 173, 160, 134,
	175, 112, 126, 183, 127, 128, 154, 100, 142, 74,
	124, 0, 115, 96, 121, 97, 113, 136, 69, 139,
	111, 162, 145, 181, 82, 149, 0, 78, 73, 0,
	0, 138, 167, 140, 159, 133, 155, 105, 148, 176,
	125, 152, 0, 0, 0, 65, 0, 0, 0, 0,
	0, 0, 0, 0, 151, 172, 123, 153, 95, 150,
	0, 98, 101, 182, 170, 118, 119, 0, 0, 0,
	0, 0, 0, 0, 137, 141, 156, 131, 0, 0,
	0, 0, 0, 0, 0, 0, 116, 0, 147, 0,
	0, 0, 102, 99, 135, 0, 0, 0, 104, 0,
	117, 157, 0, 168, 132, 184, 171, 130, 129, 174,
	177, 166, 114, 122, 68, 120, 77, 75, 79, 110,
	169, 163, 164, 165, 71, 0, 108, 109, 106, 107,
	143, 144, 178, 179, 180, 158, 103, 0, 0, 161,
	146, 67, 0, 72, 81, 76, 70, 0, 0, 0,
	0, 0, 80, 173, 160, 134, 175, 112, 126, 183,
	127, 128, 154, 100, 142, 74, 124, 0, 115, 96,
	121, 97, 113, 136, 69, 139, 111, 162, 145, 181,
	82, 149, 0, 78, 73, 0, 0, 138, 167, 140,
	159, 133, 155, 105, 148, 176, 125, 152, 0, 0,
	0, 227, 0, 0, 0, 0, 0, 0, 0, 0,
	151, 172, 123, 153, 95, 150, 0, 98, 101, 182,
	170, 118, 119, 0, 0, 0, 0, 0, 0, 0,
	137, 141, 156, 131, 0, 0, 0, 0, 0, 0,
	0, 0, 116, 0, 147, 0, 0, 0, 102, 99,
	135, 0, 0, 0, 104, 0, 117, 157, 0, 168,
	132, 184, 171, 130, 129, 174, 177, 166, 114, 122,
	68, 120, 77, 75, 79, 110, 169, 163, 164, 165,
	71, 0, 108, 109, 106, 107, 143, 144, 178, 179,
	180, 158, 103, 0, 0, 161, 146, 67, 0, 72,
	81, 76, 70, 0, 0, 0, 0, 0, 80, 173,
	160, 134, 175, 112, 126, 183, 127, 128, 154, 100,
	142, 74, 124, 0, 115, 96, 121, 97, 113, 136,
	69, 139, 111, 162, 145, 181, 82, 149, 0, 78,
	73, 0, 0, 138, 167, 140, 159, 133, 155, 105,
	148, 176, 125, 152, 0, 0, 0, 186, 0, 0,
	0, 0, 0, 0, 0, 0, 151, 172, 123, 153,
	95, 150, 0, 98, 101, 182, 170, 118, 119, 0,
	0, 0, 0, 0, 0, 0, 137, 141, 156, 131,
	0, 0, 0, 0, 0, 0, 0, 0, 116, 0,
	147, 0, 0, 0, 102, 99, 135, 0, 0, 0,
	104, 0, 117, 157, 0, 168, 132, 184, 171, 130,
	129, 174, 177, 166, 114, 122, 68, 120, 77, 75,
	79, 110, 169, 163, 164, 165, 71, 0, 108, 109,
	106, 107, 143, 144, 178, 179, 180, 158, 103, 0,
	0, 161, 146, 67, 0, 72, 81, 76, 70, 0,
	0, 0, 0, 0, 80, 173, 160, 134, 175, 112,
	126, 183, 127, 128, 154, 100, 142, 74, 124, 0,
	115, 96, 121, 97, 113, 136, 69, 139, 111, 162,
	145, 181, 82, 149, 0, 78, 73, 0, 0, 138,
	167, 140, 159, 133, 155, 105, 148, 176, 125, 152,
	0, 0, 0, 92, 0, 0, 0, 0, 0, 0,
	0, 0, 151, 172, 123, 153, 95, 150, 0, 98,
	101, 182, 170, 118, 119, 0, 0, 0, 0, 0,
	0, 0, 137, 141, 156, 131, 0, 0, 0, 0,
	0, 0, 0, 0, 116, 0, 147, 0, 0, 0,
	102, 99, 135, 0, 0, 0, 104, 0, 117, 157,
	0, 168, 132, 184, 171, 130, 129, 174, 177, 166,
	114, 122, 68, 120, 77, 75, 79, 110, 169, 163,
	164, 165, 71, 0, 108, 109, 106, 107, 143, 144,
	178, 179, 180, 158, 103, 0, 0, 161, 146, 67,
	74, 72, 81, 76, 70, 253, 0, 0, 0, 69,
	80, 252, 0, 0, 289, 82, 0, 0, 78, 73,
	0, 0, 0, 0, 282, 283, 0, 0, 0, 0,
	0, 0, 0, 46, 0, 0, 227, 270, 269, 271,
	272, 273, 274, 0, 0, 275, 276, 277, 0, 0,
	250, 263, 0, 288, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 260, 261, 549, 0, 0, 0, 300,
	0, 262, 0, 0, 259, 264, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 184, 0, 0, 298,
	0, 0, 0, 0, 0, 68, 0, 77, 75, 79,
	0, 0, 0, 0, 0, 71, 0, 290, 299, 296,
	297, 294, 295, 293, 292, 291, 301, 284, 285, 287,
	0, 286, 67, 74, 72, 81, 76, 70, 253, 0,
	0, 0, 69, 80, 252, 0, 0, 289, 82, 0,
	0, 78, 73, 0, 0, 0, 0, 282, 283, 0,
	0, 0, 0, 0, 0, 0, 46, 0, 244, 227,
	270, 269, 271, 272, 273, 274, 0, 0, 275, 276,
	277, 0, 0, 250, 263, 0, 288, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 0, 0,
	0, 0, 300, 0, 262, 0, 0, 259, 264, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 184,
	0, 0, 298, 0, 0, 0, 0, 0, 68, 0,
	77, 75, 79, 0, 0, 0, 0, 0, 71, 0,
	290, 299, 296, 297, 294, 295, 293, 292, 291, 301,
	284, 285, 287, 21, 286, 67, 0, 72, 81, 76,
	70, 0, 0, 0, 74, 0, 80, 0, 0, 253,
	0, 0, 0, 69, 0, 252, 0, 0, 289, 82,
	0, 0, 78, 73, 0, 0, 0, 0, 282, 283,
	0, 0, 0, 0, 0, 0, 0, 46, 0, 0,
	227, 270, 269, 271, 272, 273, 274, 0, 0, 275,
	276, 277, 0, 0, 250, 263, 0, 288, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 260, 261, 0,
	0, 0, 0, 300, 0, 262, 0, 0, 259, 264,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	184, 0, 0, 298, 0, 0, 0, 0, 0, 68,
	0, 77, 75, 79, 0, 0, 0, 0, 0, 71,
	0, 290, 299, 296, 297, 294, 295, 293, 292, 291,
	301, 284, 285, 287, 0, 286, 67, 74, 72, 81,
	76, 70, 253, 0, 0, 0, 69, 80, 252, 0,
	0, 289, 82, 0, 0, 78, 73, 0, 0, 0,
	0, 282, 283, 0, 0, 0, 0, 0, 0, 0,
	46, 0, 0, 227, 270, 269, 271, 272, 273, 274,
	0, 0, 275, 276, 277, 0, 0, 250, 263, 0,
	288, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	260, 261, 0, 0, 0, 0, 300, 0, 262, 0,
	0, 259, 264, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 184, 0, 0, 298, 0, 0, 0,
	0, 0, 68, 0, 77, 75, 79, 0, 0, 0,
	0, 0, 71, 0, 290, 299, 296, 297, 294, 295,
	293, 292, 291, 301, 284, 285, 287, 74, 286, 67,
	0, 72, 81, 76, 70, 0, 69, 0, 0, 0,
	80, 289, 82, 0, 0, 78, 73, 0, 0, 0,
	0, 282, 283, 0, 0, 0, 0, 0, 0, 0,
	46, 0, 0, 227, 270, 269, 271, 272, 273, 274,
	0, 0, 275, 276, 277, 0, 0, 0, 263, 0,
	288, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	260, 261, 0, 0, 0, 0, 300, 0, 262, 0,
	0, 259, 264, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 184, 0, 0, 298, 0, 0, 0,
	0, 0, 68, 0, 77, 75, 79, 0, 0, 0,
	0, 0, 71, 0, 290, 299, 296, 297, 294, 295,
	293, 292, 291, 301, 284, 285, 287, 0, 286, 67,
	0, 72, 81, 76, 70, 74, 0, 0, 21, 627,
	80, 0, 0, 0, 69, 0, 0, 0, 0, 74,
	82, 0, 0, 78, 73, 0, 0, 0, 69, 0,
	0, 0, 0, 0, 82, 0, 0, 78, 73, 0,
	0, 65, 0, 629, 0, 21, 0, 0, 0, 0,
	0, 0, 46, 365, 364, 65, 74, 0, 0, 0,
	0, 0, 0, 0, 0, 69, 0, 0, 0, 0,
	366, 82, 0, 0, 78, 73, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 46,
	0, 0, 186, 0, 0, 0, 0, 0, 0, 0,
	0, 184, 0, 0, 0, 0, 0, 0, 0, 0,
	68, 0, 77, 75, 79, 184, 0, 0, 0, 0,
	71, 0, 0, 0, 68, 0, 77, 75, 79, 0,
	0, 0, 0, 0, 71, 0, 0, 67, 0, 72,
	81, 76, 70, 0, 0, 0, 0, 0, 80, 0,
	0, 67, 184, 72, 81, 76, 70, 0, 74, 0,
	0, 68, 80, 77, 75, 79, 0, 69, 0, 0,
	0, 71, 0, 82, 0, 0, 78, 73, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 67, 0,
	72, 81, 76, 70, 65, 0, 0, 442, 0, 80,
	443, 74, 0, 0, 0, 334, 0, 0, 0, 0,
	69, 0, 0, 0, 0, 74, 82, 0, 0, 78,
	73, 0, 0, 0, 69, 0, 0, 0, 0, 0,
	82, 0, 0, 78, 73, 0, 0, 186, 0, 336,
	0, 0, 0, 0, 0, 0, 0, 0, 46, 0,
	0, 186, 0, 0, 184, 0, 0, 0, 0, 0,
	74, 0, 0, 68, 0, 77, 75, 79, 0, 69,
	0, 0, 0, 71, 0, 82, 0, 0, 78, 73,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	67, 0, 72, 81, 76, 70, 65, 184, 629, 0,
	0, 80, 0, 0, 0, 0, 68, 0, 77, 75,
	79, 184, 0, 0, 0, 0, 71, 0, 0, 0,
	68, 0, 77, 75, 79, 0, 0, 0, 0, 0,
	71, 0, 0, 67, 0, 72, 81, 76, 70, 0,
	0, 0, 0, 0, 80, 74, 0, 67, 0, 72,
	81, 76, 70, 0, 69, 0, 184, 0, 80, 0,
	82, 0, 0, 78, 73, 68, 0, 77, 75, 79,
	0, 0, 0, 0, 0, 71, 0, 0, 0, 0,
	0, 186, 0, 336, 0, 0, 0, 0, 0, 0,
	74, 0, 67, 0, 72, 81, 76, 70, 313, 69,
	0, 0, 0, 80, 0, 82, 0, 0, 78, 73,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 0, 0, 0, 0, 0, 186, 74, 0, 0,
	0, 0, 0, 0, 0, 0, 69, 0, 0, 0,
	0, 184, 82, 0, 0, 78, 73, 0, 0, 0,
	68, 0, 77, 75, 79, 0, 0, 0, 0, 0,
	71, 0, 0, 186, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 67, 0, 72,
	81, 76, 70, 0, 69, 0, 184, 0, 80, 0,
	82, 0, 0, 78, 73, 68, 0, 77, 75, 79,
	0, 0, 0, 0, 0, 71, 0, 0, 0, 0,
	0, 65, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 67, 184, 72, 81, 76, 70, 0, 74,
	0, 0, 68, 80, 77, 75, 79, 0, 69, 0,
	0, 0, 71, 0, 82, 0, 0, 78, 73, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 67,
	0, 72, 81, 76, 70, 227, 0, 0, 0, 0,
	80, 184, 0, 0, 0, 0, 0, 74, 0, 0,
	68, 0, 77, 75, 79, 0, 69, 0, 0, 0,
	71, 0, 82, 0, 0, 78, 73, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 67, 0, 72,
	81, 76, 70, 186, 0, 0, 0, 0, 80, 0,
	0, 0, 0, 0, 0, 184, 0, 0, 0, 0,
	0, 0, 0, 0, 68, 0, 77, 75, 79, 0,
	0, 0, 0, 0, 71, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 67, 0, 72, 81, 76, 70, 0, 0, 0,
	0, 0, 80, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 68, 0, 77, 75, 79, 0, 0, 0,
	0, 0, 71, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 67,
	0, 72, 81, 76, 70, 0, 0, 0, 0, 0,
	80,
}

var yyPact = [...]int{
	1179, -1000, -124, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 517,
	537, -1000, -1000, -1000, -1000, -1000, 786, -30, 23, 1,
	22, 2340, 3720, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-118, -1000, -1000, 392, -1000, -1000, -1000, -1000, -1000, 505,
	512, 406, 498, 434, -1000, -37, 3358, 3570, 3672, -45,
	-8, 3720, -83, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 18, 3720, -1000, 3720, -46, 185, -46,
	3720, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 224, 468, 2880, 2880, 517,
	-1000, 392, -1000, -1000, -1000, 469, -1000, -1000, 133, 3533,
	377, 454, -1000, -1000, -1000, 492, 3199, 3344, 68, 3720,
	51, -1000, 289, -1000, 99, -1000, 67, -1000, -1000, 3720,
	119, 182, 1560, -29, 3720, 1560, -21, 3720, 490, 378,
	3720, -1000, -1000, -1000, -1000, -1000, 532, 74, 337, -1000,
	2880, 1002, -1000, 368, -1000, -1000, 35, -1000, -1000, 3010,
	3010, 3010, 3010, 3010, 3010, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 368, 64,
	-1000, 2747, 368, 368, 368, 368, 368, 368, 2880, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 348, -1000, 440, 505, 224, 434, 3301, 386,
	-1000, -1000, 365, 3720, -1000, 3672, 3358, 3358, 3358, 3358,
	-1000, 415, 412, -1000, 404, 390, 398, 3720, -1000, 265,
	224, 3199, 50, -1000, 3488, -1000, -1000, 2184, 526, 3358,
	3720, -1000, -1000, 3672, 2880, 2028, 1560, 489, -54, -1000,
	-1000, -1000, -1000, -1000, 3720, 54, -1000, 3720, -1000, -1000,
	3720, 1560, -1000, 442, 2880, 2880, 310, 2880, 2880, 91,
	3010, 170, 141, 3010, 3010, 3010, 3010, 3010, 3010, 3010,
	3010, 3010, 3010, 3010, 3010, 3010, 3010, 3010, 101, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 392, 557, 557,
	58, 58, 58, 58, 58, 55, 1114, 2028, 260, 175,
	2747, 2473, 2473, 2880, 2880, 2473, 500, 111, 175, 3618,
	-1000, 224, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2473,
	2473, 2473, 2473, 2880, -1000, -1000, -1000, 468, -1000, 500,
	514, -1000, 451, 448, 2473, -1000, 376, 3672, 368, -1000,
	3162, -1000, 350, 454, 375, 768, -1000, -1000, -1000, -1000,
	411, -1000, 408, -1000, -1000, -1000, -1000, -1000, 224, -1000,
	-11, -12, -17, -1000, -1000, -1000, -1000, 517, 2880, 317,
	-1000, -1000, 175, -1000, 63, -1000, -1000, -1000, 374, 3618,
	1560, -1000, 78, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 430, 91, 135, -1000, -1000, 262, -1000,
	-1000, 175, 175, 1024, -1000, -1000, -1000, -1000, 170, 3010,
	3010, 3010, 177, 1024, 1224, 155, 879, 58, 186, 186,
	75, 75, 75, 75, 75, 202, 202, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 224, 2473, 301, -1000, -1000,
	3148, 61, 368, 2880, -1000, 252, 252, 14, 240, 252,
	2473, 120, -1000, 2880, 224, -1000, 252, 224, 252, 252,
	-1000, -1000, 3720, -1000, -1000, -1000, -1000, 327, -1000, 483,
	283, 294, -1000, -1000, 2606, 224, 257, 57, 517, 2880,
	2880, -1000, -1000, -1000, 368, 368, 368, 505, 175, -1000,
	1872, 3720, -1000, -1000, -1000, 3720, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 177, 1024, 779, -1000,
	3010, 3010, -1000, 252, 2473, -1000, -1000, 3403, -1000, -1000,
	1716, 2473, 175, -1000, -1000, 101, 101, 101, -101, 329,
	102, -1000, 2880, 131, -1000, -1000, -1000, -1000, -1000, -1000,
	526, 3358, 477, -1000, 368, -1000, -1000, 383, 3618, 3618,
	505, 175, 175, 3618, 3618, 3618, -1000, -1000, 1560, -1000,
	-1000, -1000, 3010, 1024, 1024, -1000, -1000, -1000, -1000, 34,
	224, 224, 56, 224, 224, 368, -95, -1000, 175, 2880,
	522, 295, 531, -1000, 368, -1000, 392, 32, -1000, -1000,
	208, -1000, 208, 208, -1000, 1024, 1404, -1000, -1000, -1000,
	143, -1000, 459, -1000, -1000, 3010, 224, 167, 175, 515,
	510, 3672, 294, 224, 3618, -1000, 3618, -1000, -1000, -1000,
	181, 101, 31, -1000, -1000, -1000, 2880, 2880, 289, -1000,
	-1000, -1000, 83, 139, -1000, 224, 3, -108, 175, 238,
	-1000, 458, 224, -1000, 423, -104, -111, 101, -1000, -1000,
	421, -1000, -1000, -106, -109, -112, -1000,
}

var yyPgo = [...]int{
	0, 723, 25, 301, 721, 718, 715, 714, 713, 710,
	709, 707, 697, 696, 695, 694, 692, 691, 690, 678,
	668, 51, 655, 647, 641, 29, 638, 36, 632, 630,
	14, 103, 13, 23, 115, 628, 10, 50, 40, 627,
	623, 622, 38, 621, 200, 620, 618, 617, 22, 5,
	609, 608, 606, 605, 32, 411, 604, 600, 599, 598,
	597, 595, 24, 2, 3, 4, 8, 593, 73, 7,
	590, 21, 589, 588, 584, 582, 12, 581, 27, 580,
	41, 30, 579, 15, 19, 31, 578, 228, 185, 577,
	572, 571, 566, 564, 563, 62, 1, 229, 9, 16,
	562, 416, 11, 35, 559, 554, 18, 17, 6, 20,
	553, 551, 550, 711, 0, 547, 544, 89,
}

var yyR1 = [...]int{
	0, 111, 112, 112, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 3, 4, 4, 5, 5, 6, 6,
	24, 24, 7, 8, 8, 115, 115, 40, 40, 9,
	10, 10, 10, 10, 11, 11, 11, 11, 12, 13,
	13, 13, 14, 110, 110, 110, 15, 16, 17, 17,
	17, 17, 17, 17, 18, 18, 19, 20, 116, 21,
	22, 22, 23, 23, 23, 27, 27, 27, 25, 25,
	26, 26, 32, 32, 31, 31, 33, 33, 33, 33,
	100, 100, 100, 99, 99, 35, 35, 36, 36, 37,
	37, 38, 38, 38, 46, 39, 39, 39, 39, 105,
	105, 104, 104, 104, 103, 103, 41, 41, 41, 41,
	42, 42, 42, 42, 43, 43, 45, 45, 44, 44,
	47, 47, 47, 47, 48, 48, 49, 49, 34, 34,
	34, 34, 34, 34, 34, 51, 51, 50, 50, 50,
	50, 50, 50, 50, 50, 50, 50, 61, 61, 61,
	61, 61, 61, 52, 52, 52, 52, 52, 52, 52,
	30, 30, 62, 62, 62, 68, 63, 63, 108, 108,
	108, 108, 55, 55, 55, 55, 55, 55, 55, 55,
	55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
	55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
	55, 55, 59, 59, 59, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 58, 58, 58, 58, 58, 58,
	58, 58, 117, 117, 60, 60, 60, 60, 28, 28,
	28, 28, 28, 109, 109, 109, 109, 109, 109, 109,
	109, 72, 72, 29, 29, 70, 70, 71, 73, 73,
	69, 69, 69, 54, 54, 54, 54, 54, 54, 54,
	56, 56, 56, 74, 74, 75, 75, 76, 76, 77,
	77, 78, 79, 79, 79, 80, 80, 80, 80, 81,
	81, 81, 53, 53, 53, 53, 53, 53, 82, 82,
	82, 82, 83, 83, 64, 64, 66, 66, 65, 67,
	84, 84, 85, 86, 86, 88, 88, 89, 89, 87,
	87, 90, 90, 90, 90, 90, 90, 90, 91, 91,
	91, 92, 92, 93, 93, 93, 94, 94, 97, 97,
	98, 98, 101, 101, 102, 102, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 113, 114, 106, 107, 107, 107,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 6, 7, 10, 1, 3, 1, 3, 6, 7,
	1, 1, 8, 7, 6, 1, 1, 1, 3, 3,
	5, 8, 4, 6, 6, 7, 7, 4, 5, 4,
	5, 5, 3, 1, 1, 1, 3, 2, 2, 2,
	2, 2, 2, 2, 1, 2, 1, 1, 0, 2,
	0, 2, 1, 2, 2, 0, 1, 1, 0, 1,
	0, 1, 0, 1, 1, 3, 1, 2, 3, 5,
	0, 1, 2, 1, 1, 0, 2, 1, 3, 1,
	1, 1, 3, 3, 3, 3, 5, 5, 3, 0,
	1, 0, 1, 2, 1, 1, 1, 2, 2, 1,
	2, 3, 2, 3, 2, 2, 2, 1, 1, 3,
	0, 5, 5, 5, 1, 3, 0, 2, 1, 3,
	3, 2, 3, 1, 1, 1, 1, 3, 3, 4,
	4, 5, 3, 4, 5, 6, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	0, 2, 1, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 2, 2, 2, 3, 1, 1,
	1, 1, 4, 5, 6, 4, 4, 6, 6, 6,
	9, 7, 5, 4, 2, 2, 2, 2, 2, 2,
	2, 2, 0, 2, 4, 4, 4, 4, 0, 3,
	4, 7, 3, 1, 2, 4, 5, 7, 2, 4,
	6, 0, 1, 0, 2, 1, 2, 4, 0, 2,
	1, 3, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 0, 3, 0, 2, 0, 3, 1,
	3, 2, 0, 1, 1, 0, 2, 4, 4, 0,
	2, 4, 2, 1, 3, 5, 4, 6, 1, 3,
	3, 5, 0, 5, 1, 3, 1, 2, 3, 1,
	1, 3, 3, 1, 1, 0, 2, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	1, 1, 1, 0, 1, 1, 0, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 0, 1, 1,
}

var yyChk = [...]int{
	-1000, -111, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -16, -17, -18, -19, -20, -3,
	-4, 6, -24, 8, 9, 29, 106, 107, 109, 108,
	110, 119, 47, 24, 120, 121, 124, 125, 126, 155,
	156, 158, 159, -113, 7, 143, 50, -112, 161, -76,
	14, -23, 5, -21, -116, -21, -21, -21, -21, 111,
	-93, 113, 65, 117, -97, 53, -96, 149, 122, 26,
	154, 132, 151, 36, 17, 125, 153, 124, 35, 126,
	160, 152, 32, -87, 113, 115, 111, 111, 112, 113,
	111, -110, 53, -95, -96, 66, 21, 23, 69, 101,
	15, 70, 100, 144, 106, 45, 136, 137, 134, 135,
	127, 28, 9, 24, 120, 20, 94, 108, 73, 74,
	123, 22, 121, 64, 18, 48, 10, 12, 13, 116,
	115, 85, 112, 43, 7, 102, 25, 82, 39, 27,
	41, 83, 16, 138, 139, 30, 148, 96, 46, 33,
	67, 62, 49, 65, 14, 44, 84, 109, 143, 42,
	6, 147, 29, 129, 130, 131, 119, 40, 111, 128,
	72, 114, 63, 5, 117, 8, 47, 118, 140, 141,
	142, 31, 71, 11, 113, -101, 53, -96, -106, -106,
	-106, -106, -106, -106, 157, -2, -80, 16, 15, -5,
	-3, -113, 6, 19, 20, -27, 37, 38, -22, -87,
	-36, -37, -38, -39, -46, -68, -113, -44, -101, 10,
	-40, -44, -84, -85, -69, -97, -101, 53, -96, -89,
	116, 112, -44, 143, 111, -44, -44, -88, 116, 53,
	-88, -44, -106, -114, 52, -81, 18, 30, -34, -50,
	67, -55, 28, 22, -54, -51, -69, -67, -68, 101,
	90, 91, 98, 68, 102, -59, -57, -58, -60, 55,
	54, 56, 57, 58, 59, 62, 63, 64, -97, -101,
	-65, -113, 41, 42, 144, 145, 148, 146, 70, 31,
	134, 142, 141, 140, 138, 139, 136, 137, 116, 135,
	96, 143, -77, -78, -34, -76, -2, -21, 33, -25,
	20, 61, -45, 25, -44, 29, 51, -41, -42, -43,
	39, 43, 45, 40, 41, 42, 46, -105, 21, -36,
	-2, -113, -104, -103, 21, -101, 55, 103, -44, -115,
	51, 10, 118, 51, 75, 103, -44, 67, 53, -107,
	-113, -98, -97, -95, 113, -44, -107, 114, -44, 22,
	49, -44, 8, 85, 66, 65, 82, 51, 17, -34,
	-52, 85, 67, 83, 84, 69, 87, 86, 97, 90,
	91, 92, 93, 94, 95, 96, 88, 89, 100, 75,
	76, 77, 78, 79, 80, 81, -68, -113, 104, 105,
	-55, -55, -55, -55, -55, -55, -113, 103, -63, -34,
	-113, -113, -113, -113, -113, -113, -113, -72, -34, -113,
	-117, -113, -117, -117, -117, -117, -117, -117, -117, -113,
	-113, -113, -113, 51, -79, 23, 24, -80, -114, -27,
	-56, -97, 56, 59, -26, 40, -53, 29, 31, -2,
	-113, -44, -84, -37, -38, -37, -38, 39, 39, 39,
	44, 39, 44, 39, -42, -101, -114, -114, -2, -47,
	47, 115, 48, -103, -102, -101, -95, -49, 11, -36,
	-44, -85, -34, -98, -102, -95, -107, 22, -94, 118,
	-44, -90, 109, 107, 28, 108, 14, 144, 160, 53,
	-44, -44, -107, 35, -34, -34, -61, 62, 67, 63,
	64, -34, -34, -55, -62, -65, -68, 60, 85, 83,
	84, 69, -55, -55, -55, -55, -55, -55, -55, -55,
	-55, -55, -55, -55, -55, -55, -55, -108, 53, 55,
	101, 122, -54, -54, -97, -32, 20, -31, -33, 92,
	-34, -101, -98, 51, -114, -31, -31, -34, -34, -31,
	-25, -70, -71, 71, -97, -114, -31, -32, -31, -31,
	-78, -81, -86, 18, 10, 31, 31, -31, -83, 49,
	-84, -64, -66, -65, -113, -2, -82, -97, -49, 49,
	49, 39, 39, -114, 112, 112, 112, -76, -34, -49,
	103, 49, -97, -107, -106, -91, -92, 114, 21, 112,
	27, 36, 62, 63, 64, -62, -55, -55, -55, -30,
	123, 66, -114, -31, 51, -100, -99, 21, -97, 55,
	103, -113, -34, -114, -114, 51, 118, 21, -114, -31,
	-73, -71, 73, -34, -114, -114, -114, -114, -114, -44,
	-35, 10, 26, -83, 51, -114, -114, -114, 51, 103,
	-76, -34, -34, -113, -113, -113, -80, -98, -44, -44,
	-106, -30, 66, -55, -55, -114, -33, -99, 92, -102,
	-32, -109, -108, -108, -109, 149, -76, 74, -34, 72,
	-49, -36, 27, -66, 31, -2, -113, -97, -97, -80,
	-48, -97, -48, -48, -107, -55, 103, -114, -114, 132,
	-113, -108, 133, -114, -114, -113, -29, 147, -34, -74,
	12, 8, -64, -2, 103, -114, 51, -114, -114, 92,
	56, 29, -55, -114, 55, -75, 13, 15, -84, -114,
	-97, -97, -114, 51, -108, -28, 85, 152, -34, -63,
	-108, 133, 56, -114, 150, 46, 153, 29, -114, 36,
	151, 154, -108, 36, 152, 153, 154,
}

var yyDef = [...]int{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 277,
	0, 68, 68, 68, 68, 68, 333, 319, 0, 0,
	0, 0, 0, 454, 454, 454, 454, 454, 454, 64,
	0, 66, 67, 0, 30, 31, 452, 1, 3, 285,
	0, 0, 72, 75, 70, 319, 0, 0, 0, 317,
	0, 449, 0, 334, 335, 338, 339, 435, 436, 437,
	438, 439, 440, 441, 442, 443, 444, 445, 446, 447,
	448, 450, 451, 0, 0, 320, 0, 315, 0, 315,
	0, 454, 53, 54, 55, 346, 347, 348, 349, 350,
	351, 352, 353, 354, 355, 356, 357, 358, 359, 360,
	361, 362, 363, 364, 365, 366, 367, 368, 369, 370,
	371, 372, 373, 374, 375, 376, 377, 378, 379, 380,
	381, 382, 383, 384, 385, 386, 387, 388, 389, 390,
	391, 392, 393, 394, 395, 396, 397, 398, 399, 400,
	401, 402, 403, 404, 405, 406, 407, 408, 409, 410,
	411, 412, 413, 414, 415, 416, 417, 418, 419, 420,
	421, 422, 423, 424, 425, 426, 427, 428, 429, 430,
	431, 432, 433, 434, 449, 57, 342, 343, 58, 59,
	60, 61, 62, 63, 65, 24, 289, 0, 0, 277,
	26, 0, 68, 73, 74, 78, 76, 77, 69, 0,
	0, 97, 99, 100, 101, 109, 0, 111, 128, 0,
	0, 37, 39, 310, 0, 260, 0, -2, -2, 0,
	0, 0, 455, 0, 0, 455, 0, 0, 0, 0,
	0, 52, 56, 25, 453, 20, 0, 0, 286, 138,
	0, 143, 144, 0, 182, 183, 184, 185, 186, 0,
	0, 0, 0, 0, 0, 208, 209, 210, 211, 263,
	264, 265, 266, 267, 268, 269, 145, 146, 260, 0,
	309, 0, 0, 0, 0, 0, 0, 0, 251, 0,
	232, 232, 232, 232, 232, 232, 232, 232, 0, 0,
	0, 0, 278, 279, 282, 285, 24, 75, 0, 80,
	79, 71, 0, 0, 127, 0, 0, 0, 0, 0,
	116, 0, 0, 119, 0, 0, 0, 0, 110, 0,
	24, 0, 130, 112, 0, 114, 115, 0, 136, 0,
	0, 35, 36, 0, 0, 0, 455, 0, 336, 42,
	456, 457, 340, 341, 0, 0, 47, 0, 49, 316,
	0, 455, 290, 0, 0, 0, 0, 0, 0, 141,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 163,
	164, 165, 166, 167, 168, 169, 156, 0, 0, 0,
	202, 203, 204, 205, 206, 0, 82, 0, 0, 176,
	0, 0, 0, 0, 0, 0, 78, 0, 252, 0,
	224, 0, 225, 226, 227, 228, 229, 230, 231, 0,
	82, 0, 0, 0, 281, 283, 284, 289, 27, 78,
	0, 270, 0, 0, 0, 81, 302, 0, 0, -2,
	0, 126, 136, 98, 105, 0, 108, 117, 118, 120,
	0, 122, 0, 124, 125, 102, 103, 175, 24, 104,
	0, 0, 0, 113, 129, 344, 345, 277, 0, 136,
	38, 311, 312, 261, 0, -2, 40, 318, 0, 0,
	455, 454, 328, 321, 322, 323, 324, 325, 326, 327,
	48, 50, 51, 0, 139, 140, 142, 157, 0, 159,
	161, 287, 288, 147, 148, 172, 173, 174, 0, 0,
	0, 0, 170, 152, 0, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 201, 178, 179,
	180, 181, 199, 200, 207, 0, 0, 83, 84, 86,
	90, 0, 261, 0, 308, 0, 0, 0, 0, 0,
	0, 258, 255, 0, 0, 233, 0, 0, 0, 0,
	280, 21, 0, 313, 314, 271, 272, 95, 28, 0,
	302, 292, 304, 306, 0, 24, 0, 298, 277, 0,
	0, 121, 123, -2, 0, 0, 0, 285, 137, 34,
	0, 0, 337, 43, 44, 0, 454, 329, 330, 331,
	332, 291, 158, 160, 162, 149, 170, 153, 0, 150,
	0, 0, 212, 0, 0, 87, 91, 0, 93, 94,
	0, 82, 177, 215, 216, 0, 0, 0, 0, 277,
	0, 256, 0, 0, 223, 234, 235, 236, 237, 22,
	136, 0, 0, 29, 0, 307, -2, 0, 0, 0,
	285, 106, 107, 0, 0, 0, 33, 262, 455, 45,
	46, 151, 0, 171, 154, 213, 85, 92, 88, 0,
	0, 0, 243, 0, 0, 0, 253, 222, 259, 0,
	273, 96, 0, 305, 0, -2, 0, 300, 299, 32,
	0, 134, 0, 0, 41, 155, 0, 214, 217, 244,
	0, 248, 0, 219, 218, 0, 0, 0, 257, 275,
	0, 0, 295, 24, 0, 131, 0, 132, 133, 89,
	0, 0, 238, 221, 254, 23, 0, 0, 303, -2,
	301, 135, 245, 0, 249, 0, 0, 0, 276, 274,
	246, 0, 0, 220, 0, 0, 0, 0, 250, 239,
	0, 242, 247, 240, 0, 0, 241,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 68, 3, 3, 3, 95, 87, 3,
	50, 52, 92, 90, 51, 91, 103, 93, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 161,
	76, 75, 77, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 97, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 86, 3, 98,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 69, 70, 71, 72, 73, 74, 78,
	79, 80, 81, 82, 83, 84, 85, 88, 89, 94,
	96, 99, 100, 101, 102, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160,
}

var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:220
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:225
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:226
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:230
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 20:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:251
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 21:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:259
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 22:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:263
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 23:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:270
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:276
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 25:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:280
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:286
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 27:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:290
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 28:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:297
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 29:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:308
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:320
		{
			yyVAL.str = InsertStr
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:324
		{
			yyVAL.str = ReplaceStr
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:330
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 33:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:336
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 34:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:340
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:345
		{
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:346
		{
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:350
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:354
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:360
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].updateExprs}
		}
	case 40:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:366
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
		}
	case 41:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:370
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:375
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 43:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:379
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 44:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:385
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 45:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:389
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 46:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:394
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 47:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:399
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 48:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:405
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:411
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 50:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:419
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 51:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:424
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:434
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:440
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:444
		{
			switch v := string(yyDollar[1].bytes); v {
			case ShowDatabasesStr, ShowTablesStr, ShowKeyspacesStr, ShowShardsStr, ShowVSchemaTablesStr:
				yyVAL.str = v
			default:
				yyVAL.str = ShowUnsupportedStr
			}
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:453
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:459
		{
			yyVAL.statement = &Show{Type: yyDollar[2].str}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:465
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:471
		{
			yyVAL.statement = &OtherRead{}
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:475
		{
			yyVAL.statement = &OtherRead{}
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:479
		{
			yyVAL.statement = &OtherRead{}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:483
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:487
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:491
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:497
		{
			yyVAL.statement = &Begin{}
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:501
		{
			yyVAL.statement = &Begin{}
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:507
		{
			yyVAL.statement = &Commit{}
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:513
		{
			yyVAL.statement = &Rollback{}
		}
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:518
		{
			setAllowComments(yylex, true)
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:522
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:528
		{
			yyVAL.bytes2 = nil
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:532
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:538
		{
			yyVAL.str = UnionStr
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:542
		{
			yyVAL.str = UnionAllStr
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:546
		{
			yyVAL.str = UnionDistinctStr
		}
	case 75:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:551
		{
			yyVAL.str = ""
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:555
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:559
		{
			yyVAL.str = SQLCacheStr
		}
	case 78:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:564
		{
			yyVAL.str = ""
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:568
		{
			yyVAL.str = DistinctStr
		}
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:573
		{
			yyVAL.str = ""
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:577
		{
			yyVAL.str = StraightJoinHint
		}
	case 82:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:582
		{
			yyVAL.selectExprs = nil
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:586
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:592
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:596
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:602
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:606
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:610
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 89:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:614
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 90:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:619
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:623
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:627
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:634
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 95:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:639
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:643
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:649
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:653
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:663
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:667
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:671
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:677
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:690
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 106:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:694
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 107:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:698
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:702
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 109:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:707
		{
			yyVAL.empty = struct{}{}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:709
		{
			yyVAL.empty = struct{}{}
		}
	case 111:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:712
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:716
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:720
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:727
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:733
		{
			yyVAL.str = JoinStr
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:737
		{
			yyVAL.str = JoinStr
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:741
		{
			yyVAL.str = JoinStr
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:745
		{
			yyVAL.str = StraightJoinStr
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:751
		{
			yyVAL.str = LeftJoinStr
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:755
		{
			yyVAL.str = LeftJoinStr
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:759
		{
			yyVAL.str = RightJoinStr
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:763
		{
			yyVAL.str = RightJoinStr
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:769
		{
			yyVAL.str = NaturalJoinStr
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:773
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:783
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:787
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:793
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:797
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:802
		{
			yyVAL.indexHints = nil
		}
	case 131:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:806
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 132:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:810
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 133:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:814
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:820
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:824
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:829
		{
			yyVAL.expr = nil
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:833
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:839
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:843
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:847
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:851
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:855
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:859
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:863
		{
			yyVAL.expr = &Default{}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:869
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:873
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:879
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:883
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 149:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:887
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 150:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:891
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 151:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:895
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:899
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 153:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:903
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 154:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:907
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 155:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:911
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:915
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:921
		{
			yyVAL.str = IsNullStr
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:925
		{
			yyVAL.str = IsNotNullStr
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:929
		{
			yyVAL.str = IsTrueStr
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:933
		{
			yyVAL.str = IsNotTrueStr
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:937
		{
			yyVAL.str = IsFalseStr
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:941
		{
			yyVAL.str = IsNotFalseStr
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:947
		{
			yyVAL.str = EqualStr
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:951
		{
			yyVAL.str = LessThanStr
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:955
		{
			yyVAL.str = GreaterThanStr
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:959
		{
			yyVAL.str = LessEqualStr
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:963
		{
			yyVAL.str = GreaterEqualStr
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:967
		{
			yyVAL.str = NotEqualStr
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:971
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:976
		{
			yyVAL.expr = nil
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:980
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:986
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:990
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:994
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1000
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1006
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1010
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1016
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1020
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1024
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1028
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1034
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1038
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1042
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1046
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1050
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1054
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1058
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1062
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1066
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1070
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1074
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1078
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1082
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1086
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1090
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1094
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1098
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1102
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1106
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1110
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1114
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1118
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1126
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1140
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1144
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1148
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent}
		}
	case 212:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1166
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 213:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1170
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 214:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1174
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 215:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1184
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 216:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1188
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 217:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1192
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 218:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1196
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 219:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1200
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 220:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1204
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 221:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1208
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 222:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1212
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 223:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1216
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1226
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1230
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1234
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1238
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1243
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1248
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1253
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1258
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 234:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1272
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 235:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1276
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1280
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 237:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1284
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 238:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1290
		{
			yyVAL.str = ""
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1294
		{
			yyVAL.str = BooleanModeStr
		}
	case 240:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1298
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 241:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1302
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1306
		{
			yyVAL.str = QueryExpansionStr
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1313
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str}
		}
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1317
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str}
		}
	case 245:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1321
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1325
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Length: NewIntVal(yyDollar[3].bytes), Charset: yyDollar[5].str}
		}
	case 247:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1329
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Length: NewIntVal(yyDollar[3].bytes), Charset: yyDollar[7].str, Operator: CharacterSetStr}
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1333
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Charset: yyDollar[2].str}
		}
	case 249:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1337
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Charset: yyDollar[4].str, Operator: CharacterSetStr}
		}
	case 250:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1341
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Length: NewIntVal(yyDollar[3].bytes), Scale: NewIntVal(yyDollar[5].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1346
		{
			yyVAL.expr = nil
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1350
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 253:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1355
		{
			yyVAL.str = string("")
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1359
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1365
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1369
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1375
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 258:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1380
		{
			yyVAL.expr = nil
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1384
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1390
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1394
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 262:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1398
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1404
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1408
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1412
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1416
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1420
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1424
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1428
		{
			yyVAL.expr = &NullVal{}
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1434
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1443
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1447
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 273:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1452
		{
			yyVAL.exprs = nil
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1456
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 275:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1461
		{
			yyVAL.expr = nil
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1465
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 277:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1470
		{
			yyVAL.orderBy = nil
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1474
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1480
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1484
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1490
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 282:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1495
		{
			yyVAL.str = AscScr
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1499
		{
			yyVAL.str = AscScr
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1503
		{
			yyVAL.str = DescScr
		}
	case 285:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1508
		{
			yyVAL.limit = nil
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1512
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 287:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1516
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1520
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 289:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1525
		{
			yyVAL.str = ""
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1529
		{
			yyVAL.str = ForUpdateStr
		}
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1533
		{
			yyVAL.str = ShareModeStr
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1546
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1550
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1554
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 295:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1559
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1563
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 297:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1567
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1574
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1578
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1582
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 301:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1586
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1591
		{
			yyVAL.updateExprs = nil
		}
	case 303:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1595
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1601
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1605
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1611
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1615
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1621
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1627
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1637
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1641
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1647
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 315:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1656
		{
			yyVAL.byt = 0
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1658
		{
			yyVAL.byt = 1
		}
	case 317:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1661
		{
			yyVAL.empty = struct{}{}
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1663
		{
			yyVAL.empty = struct{}{}
		}
	case 319:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1666
		{
			yyVAL.str = ""
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1668
		{
			yyVAL.str = IgnoreStr
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1672
		{
			yyVAL.empty = struct{}{}
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1674
		{
			yyVAL.empty = struct{}{}
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1676
		{
			yyVAL.empty = struct{}{}
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1678
		{
			yyVAL.empty = struct{}{}
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1680
		{
			yyVAL.empty = struct{}{}
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1682
		{
			yyVAL.empty = struct{}{}
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1684
		{
			yyVAL.empty = struct{}{}
		}
	case 328:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1687
		{
			yyVAL.empty = struct{}{}
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1689
		{
			yyVAL.empty = struct{}{}
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1691
		{
			yyVAL.empty = struct{}{}
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1695
		{
			yyVAL.empty = struct{}{}
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1697
		{
			yyVAL.empty = struct{}{}
		}
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1700
		{
			yyVAL.empty = struct{}{}
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1702
		{
			yyVAL.empty = struct{}{}
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1704
		{
			yyVAL.empty = struct{}{}
		}
	case 336:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1707
		{
			yyVAL.empty = struct{}{}
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1709
		{
			yyVAL.empty = struct{}{}
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1713
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1717
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1724
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1730
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1734
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1741
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1872
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1881
		{
			decNesting(yylex)
		}
	case 454:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1886
		{
			forceEOF(yylex)
		}
	case 455:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1891
		{
			forceEOF(yylex)
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1895
		{
			forceEOF(yylex)
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1899
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
