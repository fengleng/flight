// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:17

package sqlparser

import __yyfmt__ "fmt"

//line sql.y:19

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:46
type yySymType struct {
	yys              int
	empty            struct{}
	statement        Statement
	selStmt          SelectStatement
	ins              *Insert
	byt              byte
	bytes            []byte
	bytes2           [][]byte
	str              string
	selectExprs      SelectExprs
	selectExpr       SelectExpr
	columns          Columns
	colName          *ColName
	tableExprs       TableExprs
	tableExpr        TableExpr
	tableName        TableName
	tableNames       TableNames
	indexHints       *IndexHints
	expr             Expr
	exprs            Exprs
	boolVal          BoolVal
	colTuple         ColTuple
	values           Values
	valTuple         ValTuple
	subquery         *Subquery
	whens            []*When
	when             *When
	orderBy          OrderBy
	order            *Order
	limit            *Limit
	updateExprs      UpdateExprs
	updateExpr       *UpdateExpr
	colIdent         ColIdent
	colIdents        []ColIdent
	tableIdent       TableIdent
	convertType      *ConvertType
	aliasedTableName *AliasedTableExpr
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALL = 57361
const DISTINCT = 57362
const AS = 57363
const EXISTS = 57364
const ASC = 57365
const DESC = 57366
const INTO = 57367
const DUPLICATE = 57368
const KEY = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const VALUES = 57373
const LAST_INSERT_ID = 57374
const NEXT = 57375
const VALUE = 57376
const SHARE = 57377
const MODE = 57378
const SQL_NO_CACHE = 57379
const SQL_CACHE = 57380
const JOIN = 57381
const STRAIGHT_JOIN = 57382
const LEFT = 57383
const RIGHT = 57384
const INNER = 57385
const OUTER = 57386
const CROSS = 57387
const NATURAL = 57388
const USE = 57389
const FORCE = 57390
const ON = 57391
const ID = 57392
const HEX = 57393
const STRING = 57394
const INTEGRAL = 57395
const FLOAT = 57396
const HEXNUM = 57397
const VALUE_ARG = 57398
const LIST_ARG = 57399
const COMMENT = 57400
const NULL = 57401
const TRUE = 57402
const FALSE = 57403
const OR = 57404
const AND = 57405
const NOT = 57406
const BETWEEN = 57407
const CASE = 57408
const WHEN = 57409
const THEN = 57410
const ELSE = 57411
const END = 57412
const LE = 57413
const GE = 57414
const NE = 57415
const NULL_SAFE_EQUAL = 57416
const IS = 57417
const LIKE = 57418
const REGEXP = 57419
const IN = 57420
const SHIFT_LEFT = 57421
const SHIFT_RIGHT = 57422
const DIV = 57423
const MOD = 57424
const UNARY = 57425
const COLLATE = 57426
const BINARY = 57427
const INTERVAL = 57428
const JSON_EXTRACT_OP = 57429
const JSON_UNQUOTE_EXTRACT_OP = 57430
const CREATE = 57431
const ALTER = 57432
const DROP = 57433
const RENAME = 57434
const ANALYZE = 57435
const TABLE = 57436
const INDEX = 57437
const VIEW = 57438
const TO = 57439
const IGNORE = 57440
const IF = 57441
const UNIQUE = 57442
const USING = 57443
const SHOW = 57444
const DESCRIBE = 57445
const EXPLAIN = 57446
const DATE = 57447
const ESCAPE = 57448
const REPAIR = 57449
const OPTIMIZE = 57450
const TRUNCATE = 57451
const DATABASES = 57452
const TABLES = 57453
const VITESS_KEYSPACES = 57454
const VITESS_SHARDS = 57455
const VSCHEMA_TABLES = 57456
const INTEGER = 57457
const CHARACTER = 57458
const CURRENT_TIMESTAMP = 57459
const DATABASE = 57460
const CURRENT_DATE = 57461
const CURRENT_TIME = 57462
const LOCALTIME = 57463
const LOCALTIMESTAMP = 57464
const UTC_DATE = 57465
const UTC_TIME = 57466
const UTC_TIMESTAMP = 57467
const REPLACE = 57468
const CONVERT = 57469
const CAST = 57470
const GROUP_CONCAT = 57471
const SEPARATOR = 57472
const MATCH = 57473
const AGAINST = 57474
const BOOLEAN = 57475
const LANGUAGE = 57476
const WITH = 57477
const QUERY = 57478
const EXPANSION = 57479
const BEGIN = 57480
const START = 57481
const TRANSACTION = 57482
const COMMIT = 57483
const ROLLBACK = 57484
const UNUSED = 57485

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"USING",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VSCHEMA_TABLES",
	"INTEGER",
	"CHARACTER",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"UNUSED",
	"';'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 24,
	-2, 4,
	-1, 228,
	103, 343,
	-2, 339,
	-1, 229,
	103, 344,
	-2, 340,
	-1, 452,
	5, 24,
	-2, 294,
	-1, 488,
	103, 346,
	-2, 342,
	-1, 597,
	5, 25,
	-2, 176,
	-1, 661,
	5, 25,
	-2, 295,
	-1, 700,
	5, 24,
	-2, 297,
	-1, 744,
	5, 25,
	-2, 298,
}

const yyPrivate = 57344

const yyLast = 3863

var yyAct = [...]int{
	229, 411, 687, 282, 585, 705, 223, 258, 586, 354,
	686, 552, 549, 631, 624, 197, 480, 518, 352, 245,
	332, 3, 487, 566, 247, 305, 256, 67, 582, 311,
	53, 335, 95, 188, 331, 49, 224, 356, 206, 48,
	189, 195, 771, 766, 320, 500, 770, 761, 769, 765,
	260, 760, 690, 55, 56, 57, 58, 188, 188, 498,
	722, 235, 493, 188, 196, 240, 225, 213, 231, 94,
	86, 85, 212, 86, 360, 190, 191, 192, 193, 194,
	542, 357, 543, 600, 503, 599, 188, 598, 188, 233,
	75, 211, 188, 343, 88, 89, 90, 613, 236, 70,
	91, 87, 542, 615, 543, 83, 729, 216, 79, 74,
	751, 380, 379, 389, 390, 382, 383, 384, 385, 386,
	387, 388, 381, 401, 402, 391, 66, 711, 544, 664,
	391, 635, 46, 244, 342, 542, 604, 543, 497, 499,
	496, 423, 410, 640, 473, 475, 347, 339, 381, 545,
	544, 391, 366, 369, 346, 759, 239, 368, 367, 380,
	379, 389, 390, 382, 383, 384, 385, 386, 387, 388,
	381, 545, 692, 391, 369, 501, 567, 752, 525, 368,
	367, 313, 756, 544, 367, 757, 185, 281, 614, 349,
	612, 502, 523, 524, 522, 69, 369, 78, 76, 80,
	369, 344, 735, 739, 545, 72, 46, 567, 642, 647,
	641, 188, 474, 554, 714, 717, 521, 351, 188, 188,
	186, 188, 68, 308, 73, 82, 77, 71, 617, 618,
	619, 188, 230, 81, 309, 67, 307, 188, 67, 350,
	188, 748, 246, 188, 219, 219, 227, 242, 241, 84,
	219, 246, 368, 367, 731, 246, 359, 379, 389, 390,
	382, 383, 384, 385, 386, 387, 388, 381, 216, 369,
	391, 629, 246, 219, 557, 219, 663, 246, 551, 219,
	380, 379, 389, 390, 382, 383, 384, 385, 386, 387,
	388, 381, 50, 232, 391, 389, 390, 382, 383, 384,
	385, 386, 387, 388, 381, 210, 399, 391, 511, 513,
	514, 67, 345, 512, 557, 246, 188, 625, 656, 188,
	188, 188, 188, 440, 455, 225, 318, 246, 441, 629,
	188, 583, 659, 345, 188, 452, 280, 188, 368, 367,
	188, 318, 188, 188, 317, 694, 481, 629, 442, 67,
	481, 469, 470, 225, 471, 369, 436, 486, 188, 629,
	46, 188, 477, 65, 188, 67, 318, 489, 476, 216,
	216, 216, 216, 467, 438, 439, 482, 479, 519, 606,
	19, 491, 484, 506, 216, 488, 318, 457, 596, 459,
	345, 456, 216, 458, 541, 226, 593, 583, 219, 384,
	385, 386, 387, 388, 381, 219, 337, 391, 219, 67,
	363, 448, 250, 306, 595, 21, 368, 367, 219, 203,
	556, 461, 460, 67, 219, 520, 21, 219, 546, 547,
	219, 558, 201, 369, 471, 425, 426, 427, 428, 429,
	430, 431, 464, 768, 569, 462, 571, 465, 488, 564,
	463, 699, 207, 208, 67, 587, 677, 584, 225, 46,
	764, 616, 574, 46, 507, 575, 372, 580, 579, 762,
	46, 736, 592, 697, 589, 21, 380, 379, 389, 390,
	382, 383, 384, 385, 386, 387, 388, 381, 312, 371,
	391, 597, 67, 657, 67, 67, 490, 412, 450, 603,
	451, 310, 362, 219, 421, 227, 219, 219, 219, 219,
	605, 330, 466, 608, 326, 327, 601, 468, 312, 46,
	248, 219, 198, 370, 337, 742, 519, 478, 199, 219,
	219, 578, 249, 227, 50, 478, 609, 368, 367, 577,
	620, 204, 205, 741, 725, 219, 481, 253, 219, 726,
	365, 219, 52, 54, 369, 67, 341, 47, 1, 92,
	485, 329, 272, 271, 273, 274, 275, 276, 334, 627,
	277, 355, 630, 520, 355, 492, 61, 188, 611, 638,
	639, 508, 509, 643, 515, 516, 610, 495, 649, 646,
	650, 651, 652, 653, 576, 590, 437, 555, 478, 304,
	740, 724, 555, 555, 645, 67, 555, 188, 660, 661,
	662, 188, 420, 658, 672, 565, 259, 671, 510, 270,
	555, 555, 555, 555, 267, 269, 268, 412, 665, 443,
	561, 562, 449, 67, 373, 555, 676, 257, 227, 251,
	472, 681, 215, 314, 688, 556, 682, 444, 680, 685,
	306, 321, 675, 689, 226, 319, 221, 188, 684, 214,
	655, 721, 750, 587, 67, 67, 447, 22, 698, 67,
	67, 67, 695, 488, 67, 707, 708, 51, 209, 18,
	691, 704, 226, 700, 355, 355, 17, 16, 15, 14,
	716, 696, 709, 559, 560, 602, 13, 563, 12, 11,
	10, 355, 9, 587, 727, 712, 713, 216, 718, 719,
	8, 570, 67, 572, 573, 7, 6, 5, 4, 200,
	20, 672, 728, 2, 0, 730, 581, 732, 733, 0,
	67, 21, 67, 743, 225, 0, 283, 43, 555, 749,
	0, 738, 75, 0, 754, 548, 0, 355, 744, 0,
	755, 70, 555, 0, 0, 747, 0, 83, 0, 568,
	79, 74, 0, 0, 219, 767, 0, 0, 0, 0,
	758, 637, 0, 0, 0, 46, 0, 763, 66, 0,
	43, 648, 0, 0, 0, 0, 0, 226, 202, 0,
	591, 0, 0, 217, 219, 0, 0, 0, 219, 0,
	0, 0, 412, 0, 0, 0, 0, 666, 667, 403,
	404, 405, 406, 407, 408, 0, 0, 555, 0, 0,
	0, 0, 0, 478, 555, 0, 0, 0, 355, 628,
	607, 355, 0, 322, 325, 326, 327, 323, 185, 324,
	328, 0, 21, 644, 219, 0, 0, 69, 0, 78,
	76, 80, 0, 75, 0, 0, 0, 72, 0, 0,
	0, 693, 70, 0, 0, 0, 0, 0, 83, 0,
	0, 79, 74, 626, 68, 0, 73, 82, 77, 71,
	0, 0, 0, 0, 0, 81, 46, 218, 0, 187,
	0, 633, 0, 380, 379, 389, 390, 382, 383, 384,
	385, 386, 387, 388, 381, 0, 0, 391, 723, 322,
	325, 326, 327, 323, 227, 324, 328, 0, 0, 594,
	0, 517, 0, 0, 526, 527, 528, 529, 530, 531,
	532, 533, 534, 535, 536, 537, 538, 539, 540, 43,
	0, 355, 0, 0, 0, 222, 0, 0, 0, 185,
	234, 0, 0, 0, 333, 753, 412, 0, 69, 0,
	78, 76, 80, 0, 0, 0, 0, 0, 72, 633,
	0, 353, 355, 237, 353, 238, 0, 0, 0, 243,
	0, 0, 0, 0, 0, 68, 0, 73, 82, 77,
	71, 0, 400, 0, 0, 0, 81, 0, 0, 0,
	702, 703, 0, 0, 0, 706, 706, 706, 0, 0,
	355, 0, 0, 0, 0, 0, 0, 409, 0, 0,
	413, 414, 415, 416, 417, 418, 419, 0, 422, 424,
	424, 424, 424, 424, 424, 424, 424, 432, 433, 434,
	435, 0, 21, 44, 23, 24, 0, 0, 355, 0,
	0, 453, 0, 0, 0, 217, 217, 217, 217, 0,
	33, 0, 0, 226, 0, 25, 745, 0, 746, 0,
	333, 621, 622, 623, 0, 0, 0, 0, 217, 0,
	0, 0, 0, 32, 0, 353, 46, 382, 383, 384,
	385, 386, 387, 388, 381, 0, 0, 391, 316, 0,
	0, 353, 0, 0, 0, 0, 0, 0, 340, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 348, 0,
	0, 0, 0, 0, 358, 0, 0, 361, 0, 0,
	364, 0, 0, 0, 0, 0, 0, 43, 0, 0,
	0, 0, 26, 27, 29, 28, 30, 0, 0, 0,
	413, 0, 0, 0, 0, 31, 34, 35, 0, 0,
	36, 37, 38, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 678, 679, 0, 0, 0, 0, 45,
	0, 0, 0, 0, 0, 0, 0, 0, 588, 0,
	43, 39, 40, 0, 41, 42, 75, 0, 0, 550,
	0, 255, 0, 454, 0, 70, 0, 254, 0, 0,
	291, 83, 0, 0, 79, 74, 0, 0, 0, 0,
	284, 285, 0, 0, 0, 710, 0, 0, 353, 46,
	483, 353, 228, 272, 271, 273, 274, 275, 276, 0,
	0, 277, 278, 279, 0, 494, 252, 265, 504, 290,
	0, 505, 380, 379, 389, 390, 382, 383, 384, 385,
	386, 387, 388, 381, 0, 0, 391, 0, 737, 262,
	263, 553, 0, 0, 0, 302, 0, 264, 0, 0,
	261, 266, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 185, 636, 0, 300, 0, 0, 0, 0,
	0, 69, 0, 78, 76, 80, 0, 0, 0, 0,
	0, 72, 0, 292, 301, 298, 299, 296, 297, 295,
	294, 293, 303, 286, 287, 289, 0, 288, 68, 0,
	73, 82, 77, 71, 0, 668, 669, 670, 375, 81,
	378, 0, 0, 0, 0, 0, 392, 393, 394, 395,
	396, 397, 398, 0, 376, 377, 374, 380, 379, 389,
	390, 382, 383, 384, 385, 386, 387, 388, 381, 0,
	0, 391, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 217, 0, 0, 588, 0, 0, 701,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	353, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 715, 0, 0, 720, 0, 0,
	0, 0, 0, 0, 0, 0, 588, 0, 43, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 654, 174, 161, 135, 176, 113,
	127, 184, 128, 129, 155, 101, 143, 75, 125, 0,
	116, 97, 122, 98, 114, 137, 70, 140, 112, 163,
	146, 182, 83, 150, 673, 79, 74, 0, 674, 139,
	168, 141, 160, 134, 156, 106, 149, 177, 126, 153,
	0, 0, 0, 66, 0, 0, 0, 0, 0, 0,
	0, 0, 152, 173, 124, 154, 96, 151, 0, 99,
	102, 183, 171, 119, 120, 0, 0, 0, 0, 0,
	0, 0, 138, 142, 157, 132, 0, 0, 0, 0,
	0, 0, 734, 0, 117, 0, 148, 0, 0, 0,
	103, 100, 136, 0, 0, 0, 105, 0, 118, 158,
	0, 169, 133, 185, 172, 131, 130, 175, 178, 167,
	115, 123, 69, 121, 78, 76, 80, 111, 170, 164,
	165, 166, 72, 0, 109, 110, 107, 108, 144, 145,
	179, 180, 181, 159, 104, 0, 0, 162, 147, 68,
	0, 73, 82, 77, 71, 0, 0, 0, 0, 0,
	81, 174, 161, 135, 176, 113, 127, 184, 128, 129,
	155, 101, 143, 75, 125, 0, 116, 97, 122, 98,
	114, 137, 70, 140, 112, 163, 146, 182, 83, 150,
	0, 79, 74, 0, 0, 139, 168, 141, 160, 134,
	156, 106, 149, 177, 126, 153, 46, 0, 0, 66,
	0, 0, 0, 0, 0, 0, 0, 0, 152, 173,
	124, 154, 96, 151, 0, 99, 102, 183, 171, 119,
	120, 0, 0, 0, 0, 0, 0, 0, 138, 142,
	157, 132, 0, 0, 0, 0, 0, 0, 0, 0,
	117, 0, 148, 0, 0, 0, 103, 100, 136, 0,
	0, 0, 105, 0, 118, 158, 0, 169, 133, 185,
	172, 131, 130, 175, 178, 167, 115, 123, 69, 121,
	78, 76, 80, 111, 170, 164, 165, 166, 72, 0,
	109, 110, 107, 108, 144, 145, 179, 180, 181, 159,
	104, 0, 0, 162, 147, 68, 0, 73, 82, 77,
	71, 0, 0, 0, 0, 0, 81, 174, 161, 135,
	176, 113, 127, 184, 128, 129, 155, 101, 143, 75,
	125, 0, 116, 97, 122, 98, 114, 137, 70, 140,
	112, 163, 146, 182, 83, 150, 0, 79, 74, 0,
	0, 139, 168, 141, 160, 134, 156, 106, 149, 177,
	126, 153, 0, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 0, 0, 152, 173, 124, 154, 96, 151,
	0, 99, 102, 183, 171, 119, 120, 0, 0, 0,
	0, 0, 0, 0, 138, 142, 157, 132, 0, 0,
	0, 0, 0, 0, 683, 0, 117, 0, 148, 0,
	0, 0, 103, 100, 136, 0, 0, 0, 105, 0,
	118, 158, 0, 169, 133, 185, 172, 131, 130, 175,
	178, 167, 115, 123, 69, 121, 78, 76, 80, 111,
	170, 164, 165, 166, 72, 0, 109, 110, 107, 108,
	144, 145, 179, 180, 181, 159, 104, 0, 0, 162,
	147, 68, 0, 73, 82, 77, 71, 0, 0, 0,
	0, 0, 81, 174, 161, 135, 176, 113, 127, 184,
	128, 129, 155, 101, 143, 75, 125, 0, 116, 97,
	122, 98, 114, 137, 70, 140, 112, 163, 146, 182,
	83, 150, 0, 79, 74, 0, 0, 139, 168, 141,
	160, 134, 156, 106, 149, 177, 126, 153, 0, 0,
	0, 66, 0, 0, 0, 0, 0, 0, 0, 0,
	152, 173, 124, 154, 96, 151, 0, 99, 102, 183,
	171, 119, 120, 0, 0, 0, 0, 0, 0, 0,
	138, 142, 157, 132, 0, 0, 0, 0, 0, 0,
	0, 0, 117, 0, 148, 0, 0, 0, 103, 100,
	136, 0, 0, 0, 105, 0, 118, 158, 0, 169,
	133, 185, 172, 131, 130, 175, 178, 167, 115, 123,
	69, 121, 78, 76, 80, 111, 170, 164, 165, 166,
	72, 0, 109, 110, 107, 108, 144, 145, 179, 180,
	181, 159, 104, 0, 0, 162, 147, 68, 0, 73,
	82, 77, 71, 0, 0, 0, 0, 0, 81, 174,
	161, 135, 176, 113, 127, 184, 128, 129, 155, 101,
	143, 75, 125, 0, 116, 97, 122, 98, 114, 137,
	70, 140, 112, 163, 146, 182, 83, 150, 0, 79,
	74, 0, 0, 139, 168, 141, 160, 134, 156, 106,
	149, 177, 126, 153, 0, 0, 0, 228, 0, 0,
	0, 0, 0, 0, 0, 0, 152, 173, 124, 154,
	96, 151, 0, 99, 102, 183, 171, 119, 120, 0,
	0, 0, 0, 0, 0, 0, 138, 142, 157, 132,
	0, 0, 0, 0, 0, 0, 0, 0, 117, 0,
	148, 0, 0, 0, 103, 100, 136, 0, 0, 0,
	105, 0, 118, 158, 0, 169, 133, 185, 172, 131,
	130, 175, 178, 167, 115, 123, 69, 121, 78, 76,
	80, 111, 170, 164, 165, 166, 72, 0, 109, 110,
	107, 108, 144, 145, 179, 180, 181, 159, 104, 0,
	0, 162, 147, 68, 0, 73, 82, 77, 71, 0,
	0, 0, 0, 0, 81, 174, 161, 135, 176, 113,
	127, 184, 128, 129, 155, 101, 143, 75, 125, 0,
	116, 97, 122, 98, 114, 137, 70, 140, 112, 163,
	146, 182, 83, 150, 0, 79, 74, 0, 0, 139,
	168, 141, 160, 134, 156, 106, 149, 177, 126, 153,
	0, 0, 0, 187, 0, 0, 0, 0, 0, 0,
	0, 0, 152, 173, 124, 154, 96, 151, 0, 99,
	102, 183, 171, 119, 120, 0, 0, 0, 0, 0,
	0, 0, 138, 142, 157, 132, 0, 0, 0, 0,
	0, 0, 0, 0, 117, 0, 148, 0, 0, 0,
	103, 100, 136, 0, 0, 0, 105, 0, 118, 158,
	0, 169, 133, 185, 172, 131, 130, 175, 178, 167,
	115, 123, 69, 121, 78, 76, 80, 111, 170, 164,
	165, 166, 72, 0, 109, 110, 107, 108, 144, 145,
	179, 180, 181, 159, 104, 0, 0, 162, 147, 68,
	0, 73, 82, 77, 71, 0, 0, 0, 0, 0,
	81, 174, 161, 135, 176, 113, 127, 184, 128, 129,
	155, 101, 143, 75, 125, 0, 116, 97, 122, 98,
	114, 137, 70, 140, 112, 163, 146, 182, 83, 150,
	0, 79, 74, 0, 0, 139, 168, 141, 160, 134,
	156, 106, 149, 177, 126, 153, 0, 0, 0, 93,
	0, 0, 0, 0, 0, 0, 0, 0, 152, 173,
	124, 154, 96, 151, 0, 99, 102, 183, 171, 119,
	120, 0, 0, 0, 0, 0, 0, 0, 138, 142,
	157, 132, 0, 0, 0, 0, 0, 0, 0, 0,
	117, 0, 148, 0, 0, 0, 103, 100, 136, 0,
	0, 0, 105, 0, 118, 158, 0, 169, 133, 185,
	172, 131, 130, 175, 178, 167, 115, 123, 69, 121,
	78, 76, 80, 111, 170, 164, 165, 166, 72, 0,
	109, 110, 107, 108, 144, 145, 179, 180, 181, 159,
	104, 0, 0, 162, 147, 68, 75, 73, 82, 77,
	71, 255, 0, 0, 0, 70, 81, 254, 0, 0,
	291, 83, 0, 0, 79, 74, 0, 0, 0, 0,
	284, 285, 0, 0, 0, 0, 0, 0, 0, 46,
	0, 0, 228, 272, 271, 273, 274, 275, 276, 0,
	0, 277, 278, 279, 0, 0, 252, 265, 0, 290,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 262,
	263, 553, 0, 0, 0, 302, 0, 264, 0, 0,
	261, 266, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 185, 0, 0, 300, 0, 0, 0, 0,
	0, 69, 0, 78, 76, 80, 0, 0, 0, 0,
	0, 72, 0, 292, 301, 298, 299, 296, 297, 295,
	294, 293, 303, 286, 287, 289, 0, 288, 68, 75,
	73, 82, 77, 71, 255, 0, 0, 0, 70, 81,
	254, 0, 0, 291, 83, 0, 0, 79, 74, 0,
	0, 0, 0, 284, 285, 0, 0, 0, 0, 0,
	0, 0, 46, 0, 246, 228, 272, 271, 273, 274,
	275, 276, 0, 0, 277, 278, 279, 0, 0, 252,
	265, 0, 290, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 262, 263, 0, 0, 0, 0, 302, 0,
	264, 0, 0, 261, 266, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 0, 0, 300, 0,
	0, 0, 0, 0, 69, 0, 78, 76, 80, 0,
	0, 0, 0, 0, 72, 0, 292, 301, 298, 299,
	296, 297, 295, 294, 293, 303, 286, 287, 289, 21,
	288, 68, 0, 73, 82, 77, 71, 0, 0, 0,
	75, 0, 81, 0, 0, 255, 0, 0, 0, 70,
	0, 254, 0, 0, 291, 83, 0, 0, 79, 74,
	0, 0, 0, 0, 284, 285, 0, 0, 0, 0,
	0, 0, 0, 46, 0, 0, 228, 272, 271, 273,
	274, 275, 276, 0, 0, 277, 278, 279, 0, 0,
	252, 265, 0, 290, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 262, 263, 0, 0, 0, 0, 302,
	0, 264, 0, 0, 261, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 0, 0, 300,
	0, 0, 0, 0, 0, 69, 0, 78, 76, 80,
	0, 0, 0, 0, 0, 72, 0, 292, 301, 298,
	299, 296, 297, 295, 294, 293, 303, 286, 287, 289,
	0, 288, 68, 75, 73, 82, 77, 71, 255, 0,
	0, 0, 70, 81, 254, 0, 0, 291, 83, 0,
	0, 79, 74, 0, 0, 0, 0, 284, 285, 0,
	0, 0, 0, 0, 0, 0, 46, 0, 0, 228,
	272, 271, 273, 274, 275, 276, 0, 0, 277, 278,
	279, 0, 0, 252, 265, 0, 290, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 262, 263, 0, 0,
	0, 0, 302, 0, 264, 0, 0, 261, 266, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 185,
	0, 0, 300, 0, 0, 0, 0, 0, 69, 0,
	78, 76, 80, 0, 0, 0, 0, 0, 72, 0,
	292, 301, 298, 299, 296, 297, 295, 294, 293, 303,
	286, 287, 289, 75, 288, 68, 0, 73, 82, 77,
	71, 0, 70, 0, 0, 0, 81, 291, 83, 0,
	0, 79, 74, 0, 0, 0, 0, 284, 285, 0,
	0, 0, 0, 0, 0, 0, 46, 0, 0, 228,
	272, 271, 273, 274, 275, 276, 0, 0, 277, 278,
	279, 0, 0, 0, 265, 0, 290, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 262, 263, 0, 0,
	0, 0, 302, 0, 264, 0, 0, 261, 266, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 185,
	0, 0, 300, 0, 0, 0, 0, 0, 69, 0,
	78, 76, 80, 0, 0, 0, 0, 0, 72, 0,
	292, 301, 298, 299, 296, 297, 295, 294, 293, 303,
	286, 287, 289, 0, 288, 68, 0, 73, 82, 77,
	71, 75, 0, 0, 0, 632, 81, 0, 0, 0,
	70, 0, 0, 0, 0, 0, 83, 0, 0, 79,
	74, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 66, 0, 634,
	0, 0, 0, 0, 0, 75, 0, 0, 0, 368,
	367, 0, 0, 0, 70, 0, 0, 0, 0, 75,
	83, 0, 0, 79, 74, 0, 369, 0, 70, 0,
	0, 0, 0, 0, 83, 0, 0, 79, 74, 0,
	0, 66, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 63, 0, 66, 75, 185, 445, 0,
	336, 446, 0, 0, 0, 70, 69, 0, 78, 76,
	80, 83, 0, 0, 79, 74, 72, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 187, 68, 338, 73, 82, 77, 71, 59,
	0, 62, 0, 0, 81, 64, 0, 0, 0, 0,
	69, 0, 78, 76, 80, 185, 0, 0, 0, 0,
	72, 0, 0, 60, 69, 0, 78, 76, 80, 0,
	0, 0, 0, 0, 72, 0, 0, 68, 0, 73,
	82, 77, 71, 0, 0, 0, 0, 0, 81, 0,
	0, 68, 185, 73, 82, 77, 71, 0, 0, 0,
	0, 69, 81, 78, 76, 80, 0, 75, 0, 0,
	0, 72, 0, 0, 0, 0, 70, 0, 0, 0,
	0, 0, 83, 0, 0, 79, 74, 0, 68, 0,
	73, 82, 77, 71, 0, 0, 0, 0, 0, 81,
	46, 0, 0, 187, 75, 0, 0, 0, 0, 0,
	0, 0, 0, 70, 0, 0, 0, 0, 75, 83,
	0, 0, 79, 74, 0, 0, 0, 70, 0, 0,
	0, 0, 0, 83, 0, 0, 79, 74, 0, 0,
	66, 0, 634, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 187, 0, 338, 0, 0, 0,
	0, 0, 75, 185, 0, 0, 0, 0, 0, 0,
	315, 70, 69, 0, 78, 76, 80, 83, 0, 0,
	79, 74, 72, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 187, 68,
	185, 73, 82, 77, 71, 0, 0, 0, 0, 69,
	81, 78, 76, 80, 185, 0, 0, 0, 0, 72,
	0, 0, 0, 69, 0, 78, 76, 80, 0, 0,
	0, 0, 0, 72, 0, 0, 68, 0, 73, 82,
	77, 71, 0, 0, 0, 0, 0, 81, 0, 0,
	68, 0, 73, 82, 77, 71, 0, 220, 185, 0,
	0, 81, 0, 0, 75, 0, 0, 69, 0, 78,
	76, 80, 0, 70, 0, 0, 0, 72, 0, 83,
	0, 0, 79, 74, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 68, 0, 73, 82, 77, 71,
	187, 75, 0, 0, 0, 81, 0, 0, 0, 0,
	70, 0, 0, 0, 0, 75, 83, 0, 0, 79,
	74, 0, 0, 0, 70, 0, 0, 0, 0, 0,
	83, 0, 0, 79, 74, 0, 0, 66, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 228, 0, 0, 0, 0, 0, 0, 0, 75,
	185, 0, 0, 0, 0, 0, 0, 0, 70, 69,
	0, 78, 76, 80, 83, 0, 0, 79, 74, 72,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 187, 68, 185, 73, 82,
	77, 71, 0, 0, 0, 0, 69, 81, 78, 76,
	80, 185, 0, 0, 0, 0, 72, 0, 0, 0,
	69, 0, 78, 76, 80, 0, 0, 0, 0, 0,
	72, 0, 0, 68, 0, 73, 82, 77, 71, 0,
	0, 0, 0, 0, 81, 0, 0, 68, 0, 73,
	82, 77, 71, 0, 0, 185, 0, 0, 81, 0,
	0, 0, 0, 0, 69, 0, 78, 76, 80, 0,
	0, 0, 0, 0, 72, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 68, 0, 73, 82, 77, 71, 0, 0, 0,
	0, 0, 81,
}

var yyPact = [...]int{
	1036, -1000, -122, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 520,
	547, -1000, -1000, -1000, -1000, -1000, 3248, -42, -10, -17,
	-11, 2396, 3702, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-116, -1000, -1000, 409, -1000, -1000, -1000, -1000, -1000, 506,
	513, 413, 522, 415, -1000, -45, 3410, 3607, 3658, -48,
	-48, -23, 3702, -82, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -13, 3702, -1000, 3702, -51, 195,
	-51, 3702, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 199, 502, 2936, 2936,
	520, -1000, 409, -1000, -1000, -1000, 468, -1000, -1000, 120,
	3505, 315, 794, -1000, -1000, -1000, 490, 836, 3299, 44,
	3702, 83, -1000, 261, -1000, 79, -1000, 43, -1000, -1000,
	3702, 122, 186, 164, 1616, -32, 3702, 1616, -40, 3702,
	480, 361, 3702, -1000, -1000, -1000, -1000, -1000, 542, 67,
	472, -1000, 2936, 1271, -1000, 310, -1000, -1000, 19, -1000,
	-1000, 3066, 3066, 3066, 3066, 3066, 3066, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	310, 39, -1000, 2803, 310, 310, 310, 310, 310, 310,
	2936, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 305, -1000, 351, 506, 199, 415,
	3262, 371, -1000, -1000, 469, 3702, -1000, 3658, 3410, 3410,
	3410, 3410, -1000, 383, 382, -1000, 406, 403, 473, 3702,
	-1000, 275, 199, 836, 97, -1000, 3461, -1000, -1000, 2240,
	535, 3410, 3702, -1000, -1000, 3658, 2936, 2084, 1616, 474,
	-1000, -56, -1000, -1000, -1000, -1000, -1000, 3702, 31, -1000,
	3702, -1000, -1000, 3702, 1616, -1000, 429, 2936, 2936, 246,
	2936, 2936, 71, 3066, 156, 109, 3066, 3066, 3066, 3066,
	3066, 3066, 3066, 3066, 3066, 3066, 3066, 3066, 3066, 3066,
	3066, 27, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	409, 508, 508, 30, 30, 30, 30, 30, 73, 1179,
	2084, 263, 114, 2803, 2529, 2529, 2936, 2936, 2529, 498,
	105, 114, 3644, -1000, 199, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2529, 2529, 2529, 2529, 2936, -1000, -1000, -1000,
	502, -1000, 498, 521, -1000, 437, 436, 2529, -1000, 348,
	3658, 310, -1000, 725, -1000, 339, 794, 347, 870, -1000,
	-1000, -1000, -1000, 375, -1000, 349, -1000, -1000, -1000, -1000,
	-1000, 199, -1000, -25, -27, -29, -1000, -1000, -1000, -1000,
	520, 2936, 335, -1000, -1000, 114, -1000, 33, -1000, -1000,
	-1000, 1616, 330, 3644, 1616, -1000, 76, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 425, 71, 118,
	-1000, -1000, 166, -1000, -1000, 114, 114, 1166, -1000, -1000,
	-1000, -1000, 156, 3066, 3066, 3066, 194, 1166, 807, 207,
	170, 30, 307, 307, 51, 51, 51, 51, 51, 997,
	997, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 199,
	2529, 296, -1000, -1000, 3204, 28, 310, 2936, -1000, 220,
	220, 92, 187, 220, 2529, 136, -1000, 2936, 199, -1000,
	220, 199, 220, 220, -1000, -1000, 3702, -1000, -1000, -1000,
	-1000, 308, -1000, 467, 282, 281, -1000, -1000, 2662, 199,
	225, 26, 520, 2936, 2936, -1000, -1000, -1000, 310, 310,
	310, 506, 114, -1000, 1928, -1000, 3702, -1000, -1000, -1000,
	3702, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 194, 1166, 390, -1000, 3066, 3066, -1000, 220, 2529,
	-1000, -1000, 3447, -1000, -1000, 1772, 2529, 114, -1000, -1000,
	27, 27, 27, -97, 278, 98, -1000, 2936, 273, -1000,
	-1000, -1000, -1000, -1000, -1000, 535, 3410, 446, -1000, 310,
	-1000, -1000, 420, 3644, 3644, 506, 114, 114, 3644, 3644,
	3644, -1000, -1000, 1616, -1000, -1000, -1000, 3066, 1166, 1166,
	-1000, -1000, -1000, -1000, 24, 199, 199, 82, 199, 199,
	310, -87, -1000, 114, 2936, 532, 290, 541, -1000, 310,
	-1000, 409, 3, -1000, -1000, 203, -1000, 203, 203, -1000,
	1166, 1460, -1000, -1000, -1000, 146, -1000, 442, -1000, -1000,
	3066, 199, 148, 114, 530, 510, 3658, 281, 199, 3644,
	-1000, 3644, -1000, -1000, -1000, 190, 27, 25, -1000, -1000,
	-1000, 2936, 2936, 261, -1000, -1000, -1000, 49, 129, -1000,
	199, 5, -106, 114, 223, -1000, 440, 199, -1000, 424,
	-102, -111, 27, -1000, -1000, 407, -1000, -1000, -104, -107,
	-112, -1000,
}

var yyPgo = [...]int{
	0, 723, 20, 380, 720, 719, 718, 717, 716, 715,
	710, 702, 700, 699, 698, 696, 689, 688, 687, 686,
	679, 30, 678, 677, 667, 29, 666, 38, 662, 661,
	14, 278, 12, 11, 213, 660, 34, 72, 67, 659,
	656, 655, 44, 651, 887, 643, 642, 640, 5, 16,
	639, 637, 634, 632, 26, 547, 629, 626, 625, 624,
	619, 618, 17, 1, 4, 3, 8, 616, 50, 7,
	615, 23, 612, 604, 601, 600, 35, 599, 25, 596,
	15, 24, 595, 28, 6, 36, 594, 249, 156, 232,
	587, 586, 578, 576, 575, 37, 0, 336, 9, 13,
	572, 187, 22, 31, 568, 561, 40, 18, 2, 10,
	559, 558, 557, 736, 19, 556, 553, 141,
}

var yyR1 = [...]int{
	0, 111, 112, 112, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 3, 4, 4, 5, 5, 6, 6,
	24, 24, 7, 8, 8, 115, 115, 40, 40, 9,
	10, 10, 10, 10, 10, 11, 11, 11, 11, 12,
	13, 13, 13, 14, 110, 110, 110, 15, 16, 17,
	17, 17, 17, 17, 17, 18, 18, 19, 20, 116,
	21, 22, 22, 23, 23, 23, 27, 27, 27, 25,
	25, 26, 26, 32, 32, 31, 31, 33, 33, 33,
	33, 100, 100, 100, 99, 99, 35, 35, 36, 36,
	37, 37, 38, 38, 38, 46, 39, 39, 39, 39,
	105, 105, 104, 104, 104, 103, 103, 41, 41, 41,
	41, 42, 42, 42, 42, 43, 43, 45, 45, 44,
	44, 47, 47, 47, 47, 48, 48, 49, 49, 34,
	34, 34, 34, 34, 34, 34, 51, 51, 50, 50,
	50, 50, 50, 50, 50, 50, 50, 50, 61, 61,
	61, 61, 61, 61, 52, 52, 52, 52, 52, 52,
	52, 30, 30, 62, 62, 62, 68, 63, 63, 108,
	108, 108, 108, 55, 55, 55, 55, 55, 55, 55,
	55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
	55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
	55, 55, 55, 59, 59, 59, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 58, 58, 58, 58, 58,
	58, 58, 58, 117, 117, 60, 60, 60, 60, 28,
	28, 28, 28, 28, 109, 109, 109, 109, 109, 109,
	109, 109, 72, 72, 29, 29, 70, 70, 71, 73,
	73, 69, 69, 69, 54, 54, 54, 54, 54, 54,
	54, 56, 56, 56, 74, 74, 75, 75, 76, 76,
	77, 77, 78, 79, 79, 79, 80, 80, 80, 80,
	81, 81, 81, 53, 53, 53, 53, 53, 53, 82,
	82, 82, 82, 83, 83, 64, 64, 66, 66, 65,
	67, 84, 84, 85, 86, 86, 88, 88, 89, 89,
	87, 87, 90, 90, 90, 90, 90, 90, 90, 91,
	91, 91, 92, 92, 93, 93, 93, 94, 94, 97,
	97, 98, 98, 101, 101, 102, 102, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 113, 114, 106, 107, 107, 107,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 6, 7, 10, 1, 3, 1, 3, 6, 7,
	1, 1, 8, 7, 6, 1, 1, 1, 3, 3,
	5, 6, 8, 4, 6, 6, 7, 7, 4, 5,
	4, 5, 5, 3, 1, 1, 1, 3, 2, 2,
	2, 2, 2, 2, 2, 1, 2, 1, 1, 0,
	2, 0, 2, 1, 2, 2, 0, 1, 1, 0,
	1, 0, 1, 0, 1, 1, 3, 1, 2, 3,
	5, 0, 1, 2, 1, 1, 0, 2, 1, 3,
	1, 1, 1, 3, 3, 3, 3, 5, 5, 3,
	0, 1, 0, 1, 2, 1, 1, 1, 2, 2,
	1, 2, 3, 2, 3, 2, 2, 2, 1, 1,
	3, 0, 5, 5, 5, 1, 3, 0, 2, 1,
	3, 3, 2, 3, 1, 1, 1, 1, 3, 3,
	4, 4, 5, 3, 4, 5, 6, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 0, 2, 1, 1, 1, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 2, 2, 2, 3, 1,
	1, 1, 1, 4, 5, 6, 4, 4, 6, 6,
	6, 9, 7, 5, 4, 2, 2, 2, 2, 2,
	2, 2, 2, 0, 2, 4, 4, 4, 4, 0,
	3, 4, 7, 3, 1, 2, 4, 5, 7, 2,
	4, 6, 0, 1, 0, 2, 1, 2, 4, 0,
	2, 1, 3, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 0, 3, 0, 2, 0, 3,
	1, 3, 2, 0, 1, 1, 0, 2, 4, 4,
	0, 2, 4, 2, 1, 3, 5, 4, 6, 1,
	3, 3, 5, 0, 5, 1, 3, 1, 2, 3,
	1, 1, 3, 3, 1, 1, 0, 2, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 1, 0, 1, 1, 0, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 0, 1, 1,
}

var yyChk = [...]int{
	-1000, -111, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -16, -17, -18, -19, -20, -3,
	-4, 6, -24, 8, 9, 29, 106, 107, 109, 108,
	110, 119, 47, 24, 120, 121, 124, 125, 126, 155,
	156, 158, 159, -113, 7, 143, 50, -112, 161, -76,
	14, -23, 5, -21, -116, -21, -21, -21, -21, 111,
	135, -93, 113, 65, 117, -97, 53, -96, 149, 122,
	26, 154, 132, 151, 36, 17, 125, 153, 124, 35,
	126, 160, 152, 32, -87, 113, 115, 111, 111, 112,
	113, 111, -110, 53, -95, -96, 66, 21, 23, 69,
	101, 15, 70, 100, 144, 106, 45, 136, 137, 134,
	135, 127, 28, 9, 24, 120, 20, 94, 108, 73,
	74, 123, 22, 121, 64, 18, 48, 10, 12, 13,
	116, 115, 85, 112, 43, 7, 102, 25, 82, 39,
	27, 41, 83, 16, 138, 139, 30, 148, 96, 46,
	33, 67, 62, 49, 65, 14, 44, 84, 109, 143,
	42, 6, 147, 29, 129, 130, 131, 119, 40, 111,
	128, 72, 114, 63, 5, 117, 8, 47, 118, 140,
	141, 142, 31, 71, 11, 113, -101, 53, -96, -106,
	-106, -106, -106, -106, -106, 157, -2, -80, 16, 15,
	-5, -3, -113, 6, 19, 20, -27, 37, 38, -22,
	-87, -36, -37, -38, -39, -46, -68, -113, -44, -101,
	10, -40, -44, -84, -85, -69, -97, -101, 53, -96,
	-89, 116, -89, 112, -44, 143, 111, -44, -44, -88,
	116, 53, -88, -44, -106, -114, 52, -81, 18, 30,
	-34, -50, 67, -55, 28, 22, -54, -51, -69, -67,
	-68, 101, 90, 91, 98, 68, 102, -59, -57, -58,
	-60, 55, 54, 56, 57, 58, 59, 62, 63, 64,
	-97, -101, -65, -113, 41, 42, 144, 145, 148, 146,
	70, 31, 134, 142, 141, 140, 138, 139, 136, 137,
	116, 135, 96, 143, -77, -78, -34, -76, -2, -21,
	33, -25, 20, 61, -45, 25, -44, 29, 51, -41,
	-42, -43, 39, 43, 45, 40, 41, 42, 46, -105,
	21, -36, -2, -113, -104, -103, 21, -101, 55, 103,
	-44, -115, 51, 10, 118, 51, 75, 103, -44, 67,
	53, 53, -107, -113, -98, -97, -95, 113, -44, -107,
	114, -44, 22, 49, -44, 8, 85, 66, 65, 82,
	51, 17, -34, -52, 85, 67, 83, 84, 69, 87,
	86, 97, 90, 91, 92, 93, 94, 95, 96, 88,
	89, 100, 75, 76, 77, 78, 79, 80, 81, -68,
	-113, 104, 105, -55, -55, -55, -55, -55, -55, -113,
	103, -63, -34, -113, -113, -113, -113, -113, -113, -113,
	-72, -34, -113, -117, -113, -117, -117, -117, -117, -117,
	-117, -117, -113, -113, -113, -113, 51, -79, 23, 24,
	-80, -114, -27, -56, -97, 56, 59, -26, 40, -53,
	29, 31, -2, -113, -44, -84, -37, -38, -37, -38,
	39, 39, 39, 44, 39, 44, 39, -42, -101, -114,
	-114, -2, -47, 47, 115, 48, -103, -102, -101, -95,
	-49, 11, -36, -44, -85, -34, -98, -102, -95, -107,
	22, -21, -94, 118, -44, -90, 109, 107, 28, 108,
	14, 144, 160, 53, -44, -44, -107, 35, -34, -34,
	-61, 62, 67, 63, 64, -34, -34, -55, -62, -65,
	-68, 60, 85, 83, 84, 69, -55, -55, -55, -55,
	-55, -55, -55, -55, -55, -55, -55, -55, -55, -55,
	-55, -108, 53, 55, 101, 122, -54, -54, -97, -32,
	20, -31, -33, 92, -34, -101, -98, 51, -114, -31,
	-31, -34, -34, -31, -25, -70, -71, 71, -97, -114,
	-31, -32, -31, -31, -78, -81, -86, 18, 10, 31,
	31, -31, -83, 49, -84, -64, -66, -65, -113, -2,
	-82, -97, -49, 49, 49, 39, 39, -114, 112, 112,
	112, -76, -34, -49, 103, -107, 49, -97, -107, -106,
	-91, -92, 114, 21, 112, 27, 36, 62, 63, 64,
	-62, -55, -55, -55, -30, 123, 66, -114, -31, 51,
	-100, -99, 21, -97, 55, 103, -113, -34, -114, -114,
	51, 118, 21, -114, -31, -73, -71, 73, -34, -114,
	-114, -114, -114, -114, -44, -35, 10, 26, -83, 51,
	-114, -114, -114, 51, 103, -76, -34, -34, -113, -113,
	-113, -80, -98, -44, -44, -106, -30, 66, -55, -55,
	-114, -33, -99, 92, -102, -32, -109, -108, -108, -109,
	149, -76, 74, -34, 72, -49, -36, 27, -66, 31,
	-2, -113, -97, -97, -80, -48, -97, -48, -48, -107,
	-55, 103, -114, -114, 132, -113, -108, 133, -114, -114,
	-113, -29, 147, -34, -74, 12, 8, -64, -2, 103,
	-114, 51, -114, -114, 92, 56, 29, -55, -114, 55,
	-75, 13, 15, -84, -114, -97, -97, -114, 51, -108,
	-28, 85, 152, -34, -63, -108, 133, 56, -114, 150,
	46, 153, 29, -114, 36, 151, 154, -108, 36, 152,
	153, 154,
}

var yyDef = [...]int{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 278,
	0, 69, 69, 69, 69, 69, 334, 320, 0, 0,
	0, 0, 0, 455, 455, 455, 455, 455, 455, 65,
	0, 67, 68, 0, 30, 31, 453, 1, 3, 286,
	0, 0, 73, 76, 71, 320, 0, 0, 0, 318,
	318, 0, 450, 0, 335, 336, 339, 340, 436, 437,
	438, 439, 440, 441, 442, 443, 444, 445, 446, 447,
	448, 449, 451, 452, 0, 0, 321, 0, 316, 0,
	316, 0, 455, 54, 55, 56, 347, 348, 349, 350,
	351, 352, 353, 354, 355, 356, 357, 358, 359, 360,
	361, 362, 363, 364, 365, 366, 367, 368, 369, 370,
	371, 372, 373, 374, 375, 376, 377, 378, 379, 380,
	381, 382, 383, 384, 385, 386, 387, 388, 389, 390,
	391, 392, 393, 394, 395, 396, 397, 398, 399, 400,
	401, 402, 403, 404, 405, 406, 407, 408, 409, 410,
	411, 412, 413, 414, 415, 416, 417, 418, 419, 420,
	421, 422, 423, 424, 425, 426, 427, 428, 429, 430,
	431, 432, 433, 434, 435, 450, 58, 343, 344, 59,
	60, 61, 62, 63, 64, 66, 24, 290, 0, 0,
	278, 26, 0, 69, 74, 75, 79, 77, 78, 70,
	0, 0, 98, 100, 101, 102, 110, 0, 112, 129,
	0, 0, 37, 39, 311, 0, 261, 0, -2, -2,
	0, 0, 0, 0, 456, 0, 0, 456, 0, 0,
	0, 0, 0, 53, 57, 25, 454, 20, 0, 0,
	287, 139, 0, 144, 145, 0, 183, 184, 185, 186,
	187, 0, 0, 0, 0, 0, 0, 209, 210, 211,
	212, 264, 265, 266, 267, 268, 269, 270, 146, 147,
	261, 0, 310, 0, 0, 0, 0, 0, 0, 0,
	252, 0, 233, 233, 233, 233, 233, 233, 233, 233,
	0, 0, 0, 0, 279, 280, 283, 286, 24, 76,
	0, 81, 80, 72, 0, 0, 128, 0, 0, 0,
	0, 0, 117, 0, 0, 120, 0, 0, 0, 0,
	111, 0, 24, 0, 131, 113, 0, 115, 116, 0,
	137, 0, 0, 35, 36, 0, 0, 0, 456, 0,
	69, 337, 43, 457, 458, 341, 342, 0, 0, 48,
	0, 50, 317, 0, 456, 291, 0, 0, 0, 0,
	0, 0, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 164, 165, 166, 167, 168, 169, 170, 157,
	0, 0, 0, 203, 204, 205, 206, 207, 0, 83,
	0, 0, 177, 0, 0, 0, 0, 0, 0, 79,
	0, 253, 0, 225, 0, 226, 227, 228, 229, 230,
	231, 232, 0, 83, 0, 0, 0, 282, 284, 285,
	290, 27, 79, 0, 271, 0, 0, 0, 82, 303,
	0, 0, -2, 0, 127, 137, 99, 106, 0, 109,
	118, 119, 121, 0, 123, 0, 125, 126, 103, 104,
	176, 24, 105, 0, 0, 0, 114, 130, 345, 346,
	278, 0, 137, 38, 312, 313, 262, 0, -2, 40,
	319, 456, 0, 0, 456, 455, 329, 322, 323, 324,
	325, 326, 327, 328, 49, 51, 52, 0, 140, 141,
	143, 158, 0, 160, 162, 288, 289, 148, 149, 173,
	174, 175, 0, 0, 0, 0, 171, 153, 0, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 202, 179, 180, 181, 182, 200, 201, 208, 0,
	0, 84, 85, 87, 91, 0, 262, 0, 309, 0,
	0, 0, 0, 0, 0, 259, 256, 0, 0, 234,
	0, 0, 0, 0, 281, 21, 0, 314, 315, 272,
	273, 96, 28, 0, 303, 293, 305, 307, 0, 24,
	0, 299, 278, 0, 0, 122, 124, -2, 0, 0,
	0, 286, 138, 34, 0, 41, 0, 338, 44, 45,
	0, 455, 330, 331, 332, 333, 292, 159, 161, 163,
	150, 171, 154, 0, 151, 0, 0, 213, 0, 0,
	88, 92, 0, 94, 95, 0, 83, 178, 216, 217,
	0, 0, 0, 0, 278, 0, 257, 0, 0, 224,
	235, 236, 237, 238, 22, 137, 0, 0, 29, 0,
	308, -2, 0, 0, 0, 286, 107, 108, 0, 0,
	0, 33, 263, 456, 46, 47, 152, 0, 172, 155,
	214, 86, 93, 89, 0, 0, 0, 244, 0, 0,
	0, 254, 223, 260, 0, 274, 97, 0, 306, 0,
	-2, 0, 301, 300, 32, 0, 135, 0, 0, 42,
	156, 0, 215, 218, 245, 0, 249, 0, 220, 219,
	0, 0, 0, 258, 276, 0, 0, 296, 24, 0,
	132, 0, 133, 134, 90, 0, 0, 239, 222, 255,
	23, 0, 0, 304, -2, 302, 136, 246, 0, 250,
	0, 0, 0, 277, 275, 247, 0, 0, 221, 0,
	0, 0, 0, 251, 240, 0, 243, 248, 241, 0,
	0, 242,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 68, 3, 3, 3, 95, 87, 3,
	50, 52, 92, 90, 51, 91, 103, 93, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 161,
	76, 75, 77, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 97, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 86, 3, 98,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 69, 70, 71, 72, 73, 74, 78,
	79, 80, 81, 82, 83, 84, 85, 88, 89, 94,
	96, 99, 100, 101, 102, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160,
}

var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:221
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:226
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:227
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:231
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 20:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:252
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 21:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:260
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 22:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:264
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 23:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:271
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:277
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 25:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:281
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:287
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 27:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:291
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 28:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:298
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 29:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:309
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:321
		{
			yyVAL.str = InsertStr
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:325
		{
			yyVAL.str = ReplaceStr
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:331
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 33:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:337
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 34:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:341
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:346
		{
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:347
		{
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:351
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:355
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:361
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].updateExprs}
		}
	case 40:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:378
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
		}
	case 41:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:382
		{
			yyVAL.statement = &DbDDL{Comments: Comments(yyDollar[5].bytes2), Action: CreateStr, DbName: NewNameIdent(string(yyDollar[4].bytes))}
		}
	case 42:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:386
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 43:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:391
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 44:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:395
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 45:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:401
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 46:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:405
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 47:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:410
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:415
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 49:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:421
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:427
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 51:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:435
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 52:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:440
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:450
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:456
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:460
		{
			switch v := string(yyDollar[1].bytes); v {
			case ShowDatabasesStr, ShowTablesStr:
				yyVAL.str = v
			default:
				yyVAL.str = ShowUnsupportedStr
			}
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:469
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:475
		{
			yyVAL.statement = &Show{Type: yyDollar[2].str}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:481
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:487
		{
			yyVAL.statement = &OtherRead{}
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:491
		{
			yyVAL.statement = &OtherRead{}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:495
		{
			yyVAL.statement = &OtherRead{}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:499
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:503
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:507
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:513
		{
			yyVAL.statement = &Begin{}
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:517
		{
			yyVAL.statement = &Begin{}
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:523
		{
			yyVAL.statement = &Commit{}
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:529
		{
			yyVAL.statement = &Rollback{}
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:534
		{
			setAllowComments(yylex, true)
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:538
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 71:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:544
		{
			yyVAL.bytes2 = nil
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:548
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:554
		{
			yyVAL.str = UnionStr
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:558
		{
			yyVAL.str = UnionAllStr
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:562
		{
			yyVAL.str = UnionDistinctStr
		}
	case 76:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:567
		{
			yyVAL.str = ""
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:571
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:575
		{
			yyVAL.str = SQLCacheStr
		}
	case 79:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:580
		{
			yyVAL.str = ""
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:584
		{
			yyVAL.str = DistinctStr
		}
	case 81:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:589
		{
			yyVAL.str = ""
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:593
		{
			yyVAL.str = StraightJoinHint
		}
	case 83:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:598
		{
			yyVAL.selectExprs = nil
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:602
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:608
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:612
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:618
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:622
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:626
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 90:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:630
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 91:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:635
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:639
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:643
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:650
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 96:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:655
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:659
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:665
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:669
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:679
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:683
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:687
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:693
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:706
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 107:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:710
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 108:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:714
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:718
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 110:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:723
		{
			yyVAL.empty = struct{}{}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:725
		{
			yyVAL.empty = struct{}{}
		}
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:728
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:732
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:736
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:743
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:749
		{
			yyVAL.str = JoinStr
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:753
		{
			yyVAL.str = JoinStr
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:757
		{
			yyVAL.str = JoinStr
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:761
		{
			yyVAL.str = StraightJoinStr
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:767
		{
			yyVAL.str = LeftJoinStr
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:771
		{
			yyVAL.str = LeftJoinStr
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:775
		{
			yyVAL.str = RightJoinStr
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:779
		{
			yyVAL.str = RightJoinStr
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:785
		{
			yyVAL.str = NaturalJoinStr
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:789
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:799
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:803
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:809
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:813
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 131:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:818
		{
			yyVAL.indexHints = nil
		}
	case 132:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:822
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 133:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:826
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 134:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:830
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:836
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:840
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:845
		{
			yyVAL.expr = nil
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:849
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:855
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:859
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:863
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:867
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:871
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:875
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:879
		{
			yyVAL.expr = &Default{}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:885
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:889
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:895
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:899
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 150:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:903
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 151:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:907
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 152:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:911
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:915
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 154:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:919
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 155:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:923
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 156:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:927
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:931
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:937
		{
			yyVAL.str = IsNullStr
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:941
		{
			yyVAL.str = IsNotNullStr
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:945
		{
			yyVAL.str = IsTrueStr
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:949
		{
			yyVAL.str = IsNotTrueStr
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:953
		{
			yyVAL.str = IsFalseStr
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:957
		{
			yyVAL.str = IsNotFalseStr
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:963
		{
			yyVAL.str = EqualStr
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:967
		{
			yyVAL.str = LessThanStr
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:971
		{
			yyVAL.str = GreaterThanStr
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:975
		{
			yyVAL.str = LessEqualStr
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:979
		{
			yyVAL.str = GreaterEqualStr
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:983
		{
			yyVAL.str = NotEqualStr
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:987
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 171:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:992
		{
			yyVAL.expr = nil
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:996
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1002
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1006
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1010
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1016
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1022
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1026
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1032
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1036
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1040
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1044
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1050
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1054
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1058
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1062
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1066
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1070
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1074
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1078
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1082
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1086
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1090
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1094
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1098
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1102
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1106
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1110
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1114
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1118
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1122
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1126
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1130
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1134
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1142
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1156
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1160
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1164
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent}
		}
	case 213:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1182
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 214:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1186
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 215:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1190
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 216:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1200
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 217:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1204
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 218:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1208
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 219:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1212
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 220:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1216
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 221:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1220
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 222:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1224
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 223:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1228
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 224:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1232
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1242
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1246
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1250
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1254
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1259
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1264
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1269
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1274
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 235:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1288
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1292
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 237:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1296
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1300
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 239:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1306
		{
			yyVAL.str = ""
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1310
		{
			yyVAL.str = BooleanModeStr
		}
	case 241:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1314
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 242:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1318
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1322
		{
			yyVAL.str = QueryExpansionStr
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1329
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str}
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1333
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str}
		}
	case 246:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1337
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Length: NewIntVal(yyDollar[3].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1341
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Length: NewIntVal(yyDollar[3].bytes), Charset: yyDollar[5].str}
		}
	case 248:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1345
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Length: NewIntVal(yyDollar[3].bytes), Charset: yyDollar[7].str, Operator: CharacterSetStr}
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1349
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Charset: yyDollar[2].str}
		}
	case 250:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1353
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Charset: yyDollar[4].str, Operator: CharacterSetStr}
		}
	case 251:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1357
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].str, Length: NewIntVal(yyDollar[3].bytes), Scale: NewIntVal(yyDollar[5].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1362
		{
			yyVAL.expr = nil
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1366
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 254:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1371
		{
			yyVAL.str = string("")
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1375
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1381
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1385
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 258:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1391
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 259:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1396
		{
			yyVAL.expr = nil
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1400
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1406
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1410
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 263:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1414
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1420
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1424
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1428
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1432
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1436
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1440
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1444
		{
			yyVAL.expr = &NullVal{}
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1450
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1459
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1463
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 274:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1468
		{
			yyVAL.exprs = nil
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1472
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 276:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1477
		{
			yyVAL.expr = nil
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1481
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 278:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1486
		{
			yyVAL.orderBy = nil
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1490
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1496
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1500
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1506
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 283:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1511
		{
			yyVAL.str = AscScr
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1515
		{
			yyVAL.str = AscScr
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1519
		{
			yyVAL.str = DescScr
		}
	case 286:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1524
		{
			yyVAL.limit = nil
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1528
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1532
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1536
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 290:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1541
		{
			yyVAL.str = ""
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1545
		{
			yyVAL.str = ForUpdateStr
		}
	case 292:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1549
		{
			yyVAL.str = ShareModeStr
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1562
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1566
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1570
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 296:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1575
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1579
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 298:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1583
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1590
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1594
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1598
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 302:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1602
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 303:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1607
		{
			yyVAL.updateExprs = nil
		}
	case 304:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1611
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1617
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1621
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1627
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1631
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1637
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1643
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1653
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1657
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1663
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 316:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1672
		{
			yyVAL.byt = 0
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1674
		{
			yyVAL.byt = 1
		}
	case 318:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1677
		{
			yyVAL.empty = struct{}{}
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1679
		{
			yyVAL.empty = struct{}{}
		}
	case 320:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1682
		{
			yyVAL.str = ""
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1684
		{
			yyVAL.str = IgnoreStr
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1688
		{
			yyVAL.empty = struct{}{}
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1690
		{
			yyVAL.empty = struct{}{}
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1692
		{
			yyVAL.empty = struct{}{}
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1694
		{
			yyVAL.empty = struct{}{}
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1696
		{
			yyVAL.empty = struct{}{}
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1698
		{
			yyVAL.empty = struct{}{}
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1700
		{
			yyVAL.empty = struct{}{}
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1703
		{
			yyVAL.empty = struct{}{}
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1705
		{
			yyVAL.empty = struct{}{}
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1707
		{
			yyVAL.empty = struct{}{}
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1711
		{
			yyVAL.empty = struct{}{}
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1713
		{
			yyVAL.empty = struct{}{}
		}
	case 334:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1716
		{
			yyVAL.empty = struct{}{}
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1718
		{
			yyVAL.empty = struct{}{}
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1720
		{
			yyVAL.empty = struct{}{}
		}
	case 337:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1723
		{
			yyVAL.empty = struct{}{}
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1725
		{
			yyVAL.empty = struct{}{}
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1729
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1733
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1740
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1746
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1750
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1757
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1891
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1900
		{
			decNesting(yylex)
		}
	case 455:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1905
		{
			forceEOF(yylex)
		}
	case 456:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1910
		{
			forceEOF(yylex)
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1914
		{
			forceEOF(yylex)
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1918
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
